var searchIndex = {};
searchIndex["edn"] = {"doc":"","items":[[3,"DateTime","edn","ISO 8601 combined date and time with time zone.",null,null],[3,"Utc","","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[3,"BigInt","","A big signed integer type.",null,null],[3,"OrderedFloat","","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[12,"0","","",0,null],[3,"Uuid","","A Universally Unique Identifier (UUID).",null,null],[4,"UuidParseError","","Error details for string parsing failures.",null,null],[13,"InvalidLength","","",1,null],[13,"InvalidCharacter","","",1,null],[13,"InvalidGroups","","",1,null],[13,"InvalidGroupLength","","",1,null],[0,"entities","","This module defines core types that support the transaction processor.",null,null],[3,"LookupRef","edn::entities","",null,null],[12,"a","","",2,null],[12,"v","","",2,null],[3,"TxFunction","","A \"transaction function\" that exposes some value determined by the current transaction.  The prototypical example is the current transaction ID, `(transaction-tx)`.",null,null],[12,"op","","",3,null],[4,"TempId","","A tempid, either an external tempid given in a transaction (usually as an `Value::Text`), or an internal tempid allocated by Mentat itself.",null,null],[13,"External","","",4,null],[13,"Internal","","",4,null],[4,"EntidOrIdent","","",null,null],[13,"Entid","","",5,null],[13,"Ident","","",5,null],[4,"ValuePlace","","",null,null],[13,"Entid","","",6,null],[13,"TempId","","",6,null],[13,"LookupRef","","",6,null],[13,"TxFunction","","",6,null],[13,"Vector","","",6,null],[13,"Atom","","",6,null],[13,"MapNotation","","",6,null],[4,"EntityPlace","","",null,null],[13,"Entid","","",7,null],[13,"TempId","","",7,null],[13,"LookupRef","","",7,null],[13,"TxFunction","","",7,null],[4,"AttributePlace","","",null,null],[13,"Entid","","",8,null],[4,"OpType","","",null,null],[13,"Add","","",9,null],[13,"Retract","","",9,null],[4,"Entity","","",null,null],[13,"AddOrRetract","","",10,null],[12,"op","edn::entities::Entity","",10,null],[12,"e","","",10,null],[12,"a","","",10,null],[12,"v","","",10,null],[13,"MapNotation","edn::entities","",10,null],[6,"MapNotation","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tempid"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"tempid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"tempid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"tempid"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"tempid"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"tempid"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"tempid"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"tempid"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"tempid"}],"output":{"name":"bool"}}],[11,"into_external","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"entidorident"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"entidorident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"entidorident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"entidorident"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"entidorident"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"entidorident"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"entidorident"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"entidorident"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"entidorident"}],"output":{"name":"bool"}}],[11,"unreversed","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["entidorident"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lookupref"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"lookupref"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"lookupref"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"lookupref"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"lookupref"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"lookupref"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"lookupref"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"lookupref"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"lookupref"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"txfunction"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"txfunction"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"txfunction"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"txfunction"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"txfunction"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"txfunction"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"txfunction"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"txfunction"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"txfunction"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"valueplace"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"valueplace"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"valueplace"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"valueplace"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"valueplace"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"valueplace"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"valueplace"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"valueplace"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"valueplace"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"entityplace"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"entityplace"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"entityplace"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"entityplace"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"entityplace"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"entityplace"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"entityplace"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"entityplace"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"entityplace"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"attributeplace"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"attributeplace"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"attributeplace"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"attributeplace"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"attributeplace"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"attributeplace"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"attributeplace"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"attributeplace"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"attributeplace"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"optype"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"optype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"optype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"optype"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"entity"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"entity"}],"output":{"name":"bool"}}],[0,"query","edn","",null,null],[3,"Variable","edn::query","",null,null],[12,"0","","",11,null],[3,"QueryFunction","","",null,null],[12,"0","","",12,null],[3,"Order","","An abstract declaration of ordering: direction and variable.",null,null],[12,"0","","",13,null],[12,"1","","",13,null],[3,"NamedPullAttribute","","",null,null],[12,"attribute","","",14,null],[12,"alias","","",14,null],[3,"Pull","","",null,null],[12,"var","","",15,null],[12,"patterns","","",15,null],[3,"Aggregate","","",null,null],[12,"func","","",16,null],[12,"args","","",16,null],[3,"Pattern","","",null,null],[12,"source","","",17,null],[12,"entity","","",17,null],[12,"attribute","","",17,null],[12,"value","","",17,null],[12,"tx","","",17,null],[3,"Predicate","","",null,null],[12,"operator","","",18,null],[12,"args","","",18,null],[3,"WhereFn","","",null,null],[12,"operator","","",19,null],[12,"args","","",19,null],[12,"binding","","",19,null],[3,"OrJoin","","",null,null],[12,"unify_vars","","",20,null],[12,"clauses","","",20,null],[3,"NotJoin","","",null,null],[12,"unify_vars","","",21,null],[12,"clauses","","",21,null],[3,"TypeAnnotation","","",null,null],[12,"value_type","","",22,null],[12,"variable","","",22,null],[3,"ParsedQuery","","",null,null],[12,"find_spec","","",23,null],[12,"default_source","","",23,null],[12,"with","","",23,null],[12,"in_vars","","",23,null],[12,"in_sources","","",23,null],[12,"limit","","",23,null],[12,"where_clauses","","",23,null],[12,"order","","",23,null],[4,"Direction","","",null,null],[13,"Ascending","","",24,null],[13,"Descending","","",24,null],[4,"SrcVar","","",null,null],[13,"DefaultSrc","","",25,null],[13,"NamedSrc","","",25,null],[4,"NonIntegerConstant","","These are the scalar values representable in EDN.",null,null],[13,"Boolean","","",26,null],[13,"BigInteger","","",26,null],[13,"Float","","",26,null],[13,"Text","","",26,null],[13,"Instant","","",26,null],[13,"Uuid","","",26,null],[4,"FnArg","","",null,null],[13,"Variable","","",27,null],[13,"SrcVar","","",27,null],[13,"EntidOrInteger","","",27,null],[13,"IdentOrKeyword","","",27,null],[13,"Constant","","",27,null],[13,"Vector","","",27,null],[4,"PatternNonValuePlace","","e, a, tx can't be values -- no strings, no floats -- and so they can only be variables, entity IDs, ident keywords, or placeholders. This encoding allows us to represent integers that aren't entity IDs. That'll get filtered out in the context of the database.",null,null],[13,"Placeholder","","",28,null],[13,"Variable","","",28,null],[13,"Entid","","",28,null],[13,"Ident","","",28,null],[4,"IdentOrEntid","","",null,null],[13,"Ident","","",29,null],[13,"Entid","","",29,null],[4,"PatternValuePlace","","The `v` part of a pattern can be much broader: it can represent integers that aren't entity IDs (particularly negative integers), strings, and all the rest. We group those under `Constant`.",null,null],[13,"Placeholder","","",30,null],[13,"Variable","","",30,null],[13,"EntidOrInteger","","",30,null],[13,"IdentOrKeyword","","",30,null],[13,"Constant","","",30,null],[4,"PullConcreteAttribute","","",null,null],[13,"Ident","","",31,null],[13,"Entid","","",31,null],[4,"PullAttributeSpec","","",null,null],[13,"Wildcard","","",32,null],[13,"Attribute","","",32,null],[4,"Element","","",null,null],[13,"Variable","","",33,null],[13,"Aggregate","","",33,null],[13,"Corresponding","","In a query with a `max` or `min` aggregate, a corresponding variable (indicated in the query with `(the ?var)`, is guaranteed to come from the row that provided the max or min value. Queries with more than one `max` or `min` cannot yield predictable behavior, and will err during algebrizing.",33,null],[13,"Pull","","",33,null],[4,"Limit","","",null,null],[13,"None","","",34,null],[13,"Fixed","","",34,null],[13,"Variable","","",34,null],[4,"FindSpec","","A definition of the first part of a find query: the `[:find ?foo ?bar…]` bit.",null,null],[13,"FindRel","","Returns an array of arrays, represented as a single array with length a multiple of width.",35,null],[13,"FindColl","","Returns an array of scalars, usually homogeneous. This is equivalent to mapping over the results of a `FindRel`, returning the first value of each.",35,null],[13,"FindTuple","","Returns a single tuple: a heterogeneous array of scalars. Equivalent to taking the first result from a `FindRel`.",35,null],[13,"FindScalar","","Returns a single scalar value. Equivalent to taking the first result from a `FindColl`.",35,null],[4,"VariableOrPlaceholder","","",null,null],[13,"Placeholder","","",36,null],[13,"Variable","","",36,null],[4,"Binding","","",null,null],[13,"BindScalar","","",37,null],[13,"BindColl","","",37,null],[13,"BindRel","","",37,null],[13,"BindTuple","","",37,null],[4,"UnifyVars","","",null,null],[13,"Implicit","","`Implicit` means the variables in an `or` or `not` are derived from the enclosed pattern. DataScript regards these vars as 'free': these variables don't need to be bound by the enclosing environment.",38,null],[13,"Explicit","","`Explicit` means the variables in an `or-join` or `not-join` are explicitly listed, specified with `required-vars` syntax.",38,null],[4,"OrWhereClause","","",null,null],[13,"Clause","","",39,null],[13,"And","","",39,null],[4,"WhereClause","","",null,null],[13,"NotJoin","","",40,null],[13,"OrJoin","","",40,null],[13,"Pred","","",40,null],[13,"WhereFn","","",40,null],[13,"RuleExpr","","",40,null],[13,"Pattern","","",40,null],[13,"TypeAnnotation","","",40,null],[6,"SrcVarName","","",null,null],[8,"FromValue","","",null,null],[10,"from_value","","",41,{"inputs":[{"name":"valueandspan"}],"output":{"name":"option"}}],[8,"ContainsVariables","","",null,null],[10,"accumulate_mentioned_variables","","",42,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":null}],[11,"collect_mentioned_variables","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["variable"],"name":"btreeset"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"variable"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"ordering"}}],[11,"as_str","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_string","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"plainsymbol"}}],[11,"from_valid_name","","Return a new `Variable`, assuming that the provided string is a valid name.",11,{"inputs":[{"name":"str"}],"output":{"name":"variable"}}],[11,"from_value","","",11,{"inputs":[{"name":"valueandspan"}],"output":{"generics":["variable"],"name":"option"}}],[11,"from_rc","","",11,{"inputs":[{"generics":["plainsymbol"],"name":"rc"}],"output":{"generics":["variable"],"name":"option"}}],[11,"from_symbol","","TODO: intern strings. #398.",11,{"inputs":[{"name":"plainsymbol"}],"output":{"generics":["variable"],"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"queryfunction"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"queryfunction"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"queryfunction"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"queryfunction"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"queryfunction"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"queryfunction"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"queryfunction"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"queryfunction"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"queryfunction"}],"output":{"name":"ordering"}}],[11,"from_value","","",12,{"inputs":[{"name":"valueandspan"}],"output":{"generics":["queryfunction"],"name":"option"}}],[11,"from_symbol","","",12,{"inputs":[{"name":"plainsymbol"}],"output":{"generics":["queryfunction"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"order"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"order"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"order"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"srcvar"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"srcvar"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"srcvar"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"srcvar"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"self"},{"name":"srcvar"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"self"},{"name":"srcvar"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"self"},{"name":"srcvar"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"self"},{"name":"srcvar"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"srcvar"}],"output":{"name":"ordering"}}],[11,"from_value","","",25,{"inputs":[{"name":"valueandspan"}],"output":{"generics":["srcvar"],"name":"option"}}],[11,"from_symbol","","",25,{"inputs":[{"name":"plainsymbol"}],"output":{"generics":["srcvar"],"name":"option"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"nonintegerconstant"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"nonintegerconstant"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"nonintegerconstant"}],"output":{"name":"bool"}}],[11,"from","","",26,{"inputs":[{"name":"str"}],"output":{"name":"nonintegerconstant"}}],[11,"from","","",26,{"inputs":[{"name":"string"}],"output":{"name":"nonintegerconstant"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"fnarg"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"from_value","","",27,{"inputs":[{"name":"valueandspan"}],"output":{"generics":["fnarg"],"name":"option"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_variable","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["variable"],"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"patternnonvalueplace"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"patternnonvalueplace"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"patternnonvalueplace"}],"output":{"name":"bool"}}],[11,"from","","",28,{"inputs":[{"generics":["keyword"],"name":"rc"}],"output":{"name":"self"}}],[11,"from","","",28,{"inputs":[{"name":"keyword"}],"output":{"name":"self"}}],[11,"from_value","","",28,{"inputs":[{"name":"valueandspan"}],"output":{"generics":["patternnonvalueplace"],"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"identorentid"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"identorentid"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"identorentid"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"patternvalueplace"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"patternvalueplace"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"patternvalueplace"}],"output":{"name":"bool"}}],[11,"from","","",30,{"inputs":[{"generics":["keyword"],"name":"rc"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"keyword"}],"output":{"name":"self"}}],[11,"from_value","","",30,{"inputs":[{"name":"valueandspan"}],"output":{"generics":["patternvalueplace"],"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"pullconcreteattribute"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"pullconcreteattribute"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"pullconcreteattribute"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"namedpullattribute"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"namedpullattribute"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"namedpullattribute"}],"output":{"name":"bool"}}],[11,"from","","",14,{"inputs":[{"name":"pullconcreteattribute"}],"output":{"name":"self"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"pullattributespec"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"pullattributespec"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"pullattributespec"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"pull"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"pull"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"aggregate"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"aggregate"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"is_unit","","Returns true if the element must yield only one value.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",33,{"inputs":[{"name":"variable"}],"output":{"name":"element"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"limit"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"limit"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"limit"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"findspec"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"findspec"}],"output":{"name":"bool"}}],[11,"is_unit_limited","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"expected_column_count","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"requires_distinct","","Returns true if the provided `FindSpec` cares about distinct results.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"columns","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"variableorplaceholder"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"variableorplaceholder"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"variableorplaceholder"}],"output":{"name":"bool"}}],[11,"into_var","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["variable"],"name":"option"}}],[11,"var","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["variable"],"name":"option"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"variables","","Return each variable or `None`, in order.",37,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"vec"}}],[11,"is_empty","","Return `true` if no variables are bound, i.e., all binding entries are placeholders.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_valid","","Return `true` if no variable is bound twice, i.e., each binding entry is either a placeholder or unique.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"simple","","",17,{"inputs":[{"name":"patternnonvalueplace"},{"name":"patternnonvalueplace"},{"name":"patternvalueplace"}],"output":{"generics":["pattern"],"name":"option"}}],[11,"new","","",17,{"inputs":[{"generics":["srcvar"],"name":"option"},{"name":"patternnonvalueplace"},{"name":"patternnonvalueplace"},{"name":"patternvalueplace"},{"name":"patternnonvalueplace"}],"output":{"generics":["pattern"],"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"wherefn"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"wherefn"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"wherefn"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"unifyvars"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"unifyvars"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"unifyvars"}],"output":{"name":"bool"}}],[11,"is_pattern","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"orwhereclause"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"orwhereclause"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"orwhereclause"}],"output":{"name":"bool"}}],[11,"is_pattern_or_patterns","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"orjoin"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"orjoin"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"orjoin"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"notjoin"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"notjoin"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"notjoin"}],"output":{"name":"bool"}}],[11,"new","","",21,{"inputs":[{"name":"unifyvars"},{"generics":["whereclause"],"name":"vec"}],"output":{"name":"notjoin"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"typeannotation"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"typeannotation"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"typeannotation"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"parsedquery"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"parsedquery"}],"output":{"name":"bool"}}],[11,"new","","",20,{"inputs":[{"name":"unifyvars"},{"generics":["orwhereclause"],"name":"vec"}],"output":{"name":"orjoin"}}],[11,"is_fully_unified","","Return true if either the `OrJoin` is `UnifyVars::Implicit`, or if every variable mentioned inside the join is also mentioned in the `UnifyVars` list.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"accumulate_mentioned_variables","","",40,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":null}],[11,"accumulate_mentioned_variables","","",39,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":null}],[11,"accumulate_mentioned_variables","","",20,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":null}],[11,"dismember","","",20,null],[11,"mentioned_variables","","",20,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"accumulate_mentioned_variables","","",21,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":null}],[11,"accumulate_mentioned_variables","","",18,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":null}],[11,"accumulate_mentioned_variables","","",22,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":null}],[11,"accumulate_mentioned_variables","","",37,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":null}],[11,"accumulate_mentioned_variables","","",19,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":null}],[11,"accumulate_mentioned_variables","","",17,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":null}],[0,"symbols","edn","",null,null],[3,"PlainSymbol","edn::symbols","A simplification of Clojure's Symbol.",null,null],[12,"0","","",43,null],[3,"NamespacedSymbol","","",null,null],[3,"Keyword","","A keyword is a symbol, optionally with a namespace, that prints with a leading colon. This concept is imported from Clojure, as it features in EDN and the query syntax that we use.",null,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"plainsymbol"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"namespacedsymbol"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"namespacedsymbol"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"namespacedsymbol"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"namespacedsymbol"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"namespacedsymbol"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"namespacedsymbol"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"namespacedsymbol"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"namespacedsymbol"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"namespacedsymbol"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"cmp","","",45,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"plain","","",43,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"name","","Return the name of the symbol without any leading '?' or '$'.",43,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_var_symbol","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_src_symbol","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"namespaced","","",44,{"inputs":[{"name":"n"},{"name":"t"}],"output":{"name":"self"}}],[11,"name","","",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"namespace","","",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"components","","",44,null],[11,"plain","","",45,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"namespaced","","Creates a new `Keyword`.",45,{"inputs":[{"name":"n"},{"name":"t"}],"output":{"name":"self"}}],[11,"name","","",45,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"namespace","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"components","","",45,null],[11,"is_backward","","Whether this `Keyword` should be interpreted in reverse order. For example, the two following snippets are identical:",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_forward","","Whether this `Keyword` should be interpreted in forward order. See `symbols::Keyword::is_backward`.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_namespaced","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_reversed","","Returns a `Keyword` with the same namespace and a 'backward' name. See `symbols::Keyword::is_backward`.",45,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"unreversed","","If this `Keyword` is 'backward' (see `symbols::Keyword::is_backward`), return `Some('forward name')`; otherwise, return `None`.",45,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"fmt","","Print the symbol in EDN format.",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Print the symbol in EDN format.",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Print the keyword in EDN format.",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"types","edn","",null,null],[3,"Span","edn::types","Span represents the current offset (start, end) into the input string.",null,null],[12,"0","","",46,null],[12,"1","","",46,null],[3,"ValueAndSpan","","A wrapper type around `SpannedValue` and `Span`, representing some EDN value and the parsing offset (start, end) in the original EDN string.",null,null],[12,"inner","","",47,null],[12,"span","","",47,null],[4,"Value","","Value represents one of the allowed values in an EDN string.",null,null],[13,"Nil","","",48,null],[13,"Boolean","","",48,null],[13,"Integer","","",48,null],[13,"Instant","","",48,null],[13,"BigInteger","","",48,null],[13,"Float","","",48,null],[13,"Text","","",48,null],[13,"Uuid","","",48,null],[13,"PlainSymbol","","",48,null],[13,"NamespacedSymbol","","",48,null],[13,"Keyword","","",48,null],[13,"Vector","","",48,null],[13,"List","","",48,null],[13,"Set","","",48,null],[13,"Map","","",48,null],[4,"SpannedValue","","`SpannedValue` is the parallel to `Value` but used in `ValueAndSpan`. Container types have `ValueAndSpan` children.",null,null],[13,"Nil","","",49,null],[13,"Boolean","","",49,null],[13,"Integer","","",49,null],[13,"Instant","","",49,null],[13,"BigInteger","","",49,null],[13,"Float","","",49,null],[13,"Text","","",49,null],[13,"Uuid","","",49,null],[13,"PlainSymbol","","",49,null],[13,"NamespacedSymbol","","",49,null],[13,"Keyword","","",49,null],[13,"Vector","","",49,null],[13,"List","","",49,null],[13,"Set","","",49,null],[13,"Map","","",49,null],[8,"FromMicros","","",null,null],[10,"from_micros","","",50,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[8,"ToMicros","","",null,null],[10,"to_micros","","",51,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"spannedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"spannedvalue"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"spannedvalue"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"new","","",46,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"span"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"valueandspan"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"valueandspan"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"valueandspan"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",47,{"inputs":[{"name":"spannedvalue"},{"name":"i"}],"output":{"name":"valueandspan"}}],[11,"into_atom","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["valueandspan"],"name":"option"}}],[11,"is_atom","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_atom","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["valueandspan"],"name":"option"}}],[11,"into_text","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"as_text","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"with_spans","","For debug use only!",48,{"inputs":[{"name":"self"}],"output":{"name":"valueandspan"}}],[11,"from","","",48,{"inputs":[{"name":"spannedvalue"}],"output":{"name":"value"}}],[11,"from","","",48,{"inputs":[{"name":"valueandspan"}],"output":{"name":"value"}}],[11,"is_nil","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_boolean","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_integer","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_instant","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_big_integer","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_float","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_text","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_uuid","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symbol","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_namespaced_symbol","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_vector","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_list","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_set","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_map","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_keyword","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_namespaced_keyword","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_nil","","`as_nil` does not use the macro as it does not have an underlying value, and returns `Option<()>`.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_boolean","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"as_integer","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_instant","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"as_float","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"as_big_integer","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"as_ordered_float","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["orderedfloat"],"name":"option"}}],[11,"as_text","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"as_uuid","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"as_symbol","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["plainsymbol"],"name":"option"}}],[11,"as_namespaced_symbol","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["namespacedsymbol"],"name":"option"}}],[11,"as_keyword","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"as_plain_keyword","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"as_namespaced_keyword","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"as_vector","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_list","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["linkedlist"],"name":"option"}}],[11,"as_set","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["btreeset"],"name":"option"}}],[11,"as_map","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"into_boolean","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_integer","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_instant","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"into_big_integer","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"into_ordered_float","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["orderedfloat"],"name":"option"}}],[11,"into_float","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_text","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"into_uuid","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"into_symbol","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["plainsymbol"],"name":"option"}}],[11,"into_namespaced_symbol","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["namespacedsymbol"],"name":"option"}}],[11,"into_keyword","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"into_plain_keyword","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"into_namespaced_keyword","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"into_vector","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"into_list","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["linkedlist"],"name":"option"}}],[11,"into_set","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["btreeset"],"name":"option"}}],[11,"into_map","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"from_bigint","","",48,{"inputs":[{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"from_float","","",48,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"from_ordered_float","","",48,{"inputs":[{"generics":["f64"],"name":"orderedfloat"}],"output":{"name":"value"}}],[11,"from_symbol","","",48,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"value"}}],[11,"from_keyword","","",48,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"value"}}],[11,"is_collection","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_atom","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_atom","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"option"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",48,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"ordering"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_nil","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_boolean","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_integer","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_instant","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_big_integer","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_float","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_text","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_uuid","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symbol","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_namespaced_symbol","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_vector","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_list","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_set","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_map","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_keyword","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_namespaced_keyword","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_nil","","`as_nil` does not use the macro as it does not have an underlying value, and returns `Option<()>`.",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_boolean","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"as_integer","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_instant","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"as_float","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"as_big_integer","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"as_ordered_float","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["orderedfloat"],"name":"option"}}],[11,"as_text","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"as_uuid","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"as_symbol","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["plainsymbol"],"name":"option"}}],[11,"as_namespaced_symbol","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["namespacedsymbol"],"name":"option"}}],[11,"as_keyword","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"as_plain_keyword","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"as_namespaced_keyword","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"as_vector","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_list","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["linkedlist"],"name":"option"}}],[11,"as_set","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["btreeset"],"name":"option"}}],[11,"as_map","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"into_boolean","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_integer","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_instant","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"into_big_integer","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"into_ordered_float","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["orderedfloat"],"name":"option"}}],[11,"into_float","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_text","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"into_uuid","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"into_symbol","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["plainsymbol"],"name":"option"}}],[11,"into_namespaced_symbol","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["namespacedsymbol"],"name":"option"}}],[11,"into_keyword","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"into_plain_keyword","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"into_namespaced_keyword","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"into_vector","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"into_list","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["linkedlist"],"name":"option"}}],[11,"into_set","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["btreeset"],"name":"option"}}],[11,"into_map","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"from_bigint","","",49,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"option"}}],[11,"from_float","","",49,{"inputs":[{"name":"f64"}],"output":{"name":"spannedvalue"}}],[11,"from_ordered_float","","",49,{"inputs":[{"generics":["f64"],"name":"orderedfloat"}],"output":{"name":"spannedvalue"}}],[11,"from_symbol","","",49,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"spannedvalue"}}],[11,"from_keyword","","",49,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"spannedvalue"}}],[11,"is_collection","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_atom","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_atom","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["spannedvalue"],"name":"option"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"self"},{"name":"spannedvalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",49,{"inputs":[{"name":"self"},{"name":"spannedvalue"}],"output":{"name":"ordering"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"without_spans","","",47,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"self"},{"name":"valueandspan"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",47,{"inputs":[{"name":"self"},{"name":"valueandspan"}],"output":{"name":"ordering"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_micros","edn","",52,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"to_micros","","",52,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[0,"pretty_print","","",null,null],[11,"to_pretty","edn::types","Return a pretty string representation of this `Value`.",48,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["string","error"],"name":"result"}}],[0,"utils","edn","",null,null],[5,"merge","edn::utils","Merge the EDN `Value::Map` instance `right` into `left`.  Returns `None` if either `left` or `right` is not a `Value::Map`.",null,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[0,"matcher","edn","",null,null],[11,"matches","edn::types","Performs default pattern matching between this value and some `pattern`. Returns true if matching succeeds.",48,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[0,"value_rc","edn","",null,null],[6,"ValueRc","edn::value_rc","This type alias exists to allow us to use different boxing mechanisms for values. This type must implement `FromRc` and `Cloned`, and a `From` implementation must exist for `TypedValue`.",null,null],[8,"FromRc","","",null,null],[10,"from_rc","","",53,{"inputs":[{"name":"rc"}],"output":{"name":"self"}}],[10,"from_arc","","",53,{"inputs":[{"name":"arc"}],"output":{"name":"self"}}],[8,"Cloned","","",null,null],[10,"cloned","","",54,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"to_value_rc","","",54,{"inputs":[{"name":"self"}],"output":{"name":"valuerc"}}],[0,"parse","edn","",null,null],[3,"ParseError","edn::parse","",null,null],[12,"line","","",55,null],[12,"column","","",55,null],[12,"offset","","",55,null],[12,"expected","","",55,null],[5,"nil","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"nan","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"infinity","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"raw_bigint","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["bigint"],"name":"parseresult"}}],[5,"raw_octalinteger","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["i64"],"name":"parseresult"}}],[5,"raw_hexinteger","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["i64"],"name":"parseresult"}}],[5,"raw_basedinteger","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["i64"],"name":"parseresult"}}],[5,"raw_integer","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["i64"],"name":"parseresult"}}],[5,"raw_float","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["orderedfloat"],"name":"parseresult"}}],[5,"bigint","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"octalinteger","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"hexinteger","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"basedinteger","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"integer","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"raw_text","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"parseresult"}}],[5,"text","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"uuid","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"symbol","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"keyword","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"list","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"vector","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"set","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"map","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["spannedvalue"],"name":"parseresult"}}],[5,"value","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["valueandspan"],"name":"parseresult"}}],[5,"op","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["optype"],"name":"parseresult"}}],[5,"entity","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["entity"],"name":"parseresult"}}],[5,"entities","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec"],"name":"parseresult"}}],[5,"where_fn","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["whereclause"],"name":"parseresult"}}],[5,"parse_query","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["parsedquery"],"name":"parseresult"}}],[6,"ParseResult","","",null,null],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",55,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"ns_keyword","edn","",null,null],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",52,null],[11,"date","","Retrieves a date component.",52,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",52,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",52,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",52,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",52,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",52,null],[11,"timezone","","Retrieves an associated time zone.",52,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",52,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",52,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",52,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",52,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",52,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",52,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",52,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",52,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",52,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",52,{"inputs":[{"name":"self"},{"name":"secondsformat"},{"name":"bool"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"add","","",52,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"add","","",52,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"fix","","",56,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"from","","",52,{"inputs":[{"name":"systemtime"}],"output":{"generics":["utc"],"name":"datetime"}}],[11,"from","","",52,{"inputs":[{"name":"systemtime"}],"output":{"generics":["local"],"name":"datetime"}}],[11,"hour","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",52,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_minute","","",52,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_second","","",52,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_nanosecond","","",52,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"serialize","","Serialize into a rfc3339 time string",52,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"year","","",52,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",52,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",52,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",52,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month","","",52,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month0","","",52,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day","","",52,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day0","","",52,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal","","",52,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal0","","",52,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"sub","","",52,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"sub","","",52,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"sub","","",52,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"from_str","","",52,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"from_str","","",52,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"from_str","","",52,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"cmp","","",52,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",52,null],[11,"deserialize","","",52,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"deserialize","","",52,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"deserialize","","",52,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_offset","","",56,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",56,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",56,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_utc_date","","",56,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",56,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"shl","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"to_bigint","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_add","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from_i64","","",57,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",57,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",57,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_str","","",57,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"hash","","",57,null],[11,"abs","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",57,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",57,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"checked_div","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"zero","","",57,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",57,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"one","","",57,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_biguint","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",57,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",57,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",57,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",57,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",57,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",57,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",57,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",57,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",57,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",57,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"shr","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"bigint"}}],[11,"neg","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"div_rem","","",57,null],[11,"div_floor","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",57,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"checked_sub","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"orderedfloat"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"orderedfloat"}}],[11,"deref_mut","","",0,null],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"ordering"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["orderedfloat"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"orderedfloat"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",58,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"deserialize","","",58,{"inputs":[{"name":"d"}],"output":{"generics":["uuid"],"name":"result"}}],[11,"rand","","",58,{"inputs":[{"name":"r"}],"output":{"name":"uuid"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"serialize","","",58,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default","","Returns the nil UUID, which is all zeroes",58,{"inputs":[],"output":{"name":"uuid"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",56,{"inputs":[],"output":{"generics":["utc"],"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",56,{"inputs":[],"output":{"generics":["utc"],"name":"datetime"}}],[11,"new","","Creates and initializes a BigInt.",57,{"inputs":[{"name":"sign"},{"generics":["u32"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",57,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",57,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",57,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",57,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",57,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",57,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",57,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",57,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",57,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",57,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",57,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",57,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",57,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",57,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",57,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",57,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",57,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",57,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",57,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",57,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"into_inner","","Get the value out.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"nil","","The 'nil UUID'.",58,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",58,{"inputs":[{"name":"uuidversion"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",58,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",58,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",58,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",58,{"inputs":[{"name":"self"}],"output":{"generics":["uuidvariant"],"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",58,{"inputs":[{"name":"self"}],"output":{"generics":["uuidversion"],"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",58,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",58,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",58,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",58,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and  counter portion of a V1 UUID.  If the supplied UUID is not V1, this  will return None",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",58,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"OrderedFloat"],[4,"UuidParseError"],[3,"LookupRef"],[3,"TxFunction"],[4,"TempId"],[4,"EntidOrIdent"],[4,"ValuePlace"],[4,"EntityPlace"],[4,"AttributePlace"],[4,"OpType"],[4,"Entity"],[3,"Variable"],[3,"QueryFunction"],[3,"Order"],[3,"NamedPullAttribute"],[3,"Pull"],[3,"Aggregate"],[3,"Pattern"],[3,"Predicate"],[3,"WhereFn"],[3,"OrJoin"],[3,"NotJoin"],[3,"TypeAnnotation"],[3,"ParsedQuery"],[4,"Direction"],[4,"SrcVar"],[4,"NonIntegerConstant"],[4,"FnArg"],[4,"PatternNonValuePlace"],[4,"IdentOrEntid"],[4,"PatternValuePlace"],[4,"PullConcreteAttribute"],[4,"PullAttributeSpec"],[4,"Element"],[4,"Limit"],[4,"FindSpec"],[4,"VariableOrPlaceholder"],[4,"Binding"],[4,"UnifyVars"],[4,"OrWhereClause"],[4,"WhereClause"],[8,"FromValue"],[8,"ContainsVariables"],[3,"PlainSymbol"],[3,"NamespacedSymbol"],[3,"Keyword"],[3,"Span"],[3,"ValueAndSpan"],[4,"Value"],[4,"SpannedValue"],[8,"FromMicros"],[8,"ToMicros"],[3,"DateTime"],[8,"FromRc"],[8,"Cloned"],[3,"ParseError"],[3,"Utc"],[3,"BigInt"],[3,"Uuid"]]};
searchIndex["mentat"] = {"doc":"","items":[[3,"Attribute","mentat","A Mentat schema attribute has a value type and several other flags determining how assertions with the attribute are interpreted.",null,null],[12,"value_type","","The associated value type, i.e., `:db/valueType`?",0,null],[12,"multival","","`true` if this attribute is multi-valued, i.e., it is `:db/cardinality :db.cardinality/many`.  `false` if this attribute is single-valued (the default), i.e., it is `:db/cardinality :db.cardinality/one`.",0,null],[12,"unique","","`None` if this attribute is neither unique-value nor unique-identity.",0,null],[12,"index","","`true` if this attribute is automatically indexed, i.e., it is `:db/indexing true`.",0,null],[12,"fulltext","","`true` if this attribute is automatically fulltext indexed, i.e., it is `:db/fulltext true`.",0,null],[12,"component","","`true` if this attribute is a component, i.e., it is `:db/isComponent true`.",0,null],[12,"no_history","","`true` if this attribute doesn't require history to be kept, i.e., it is `:db/noHistory true`.",0,null],[6,"Entid","","Represents one entid in the entid space.",null,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[8,"HasSchema","","",null,null],[10,"entid_for_type","","",1,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["knownentid"],"name":"option"}}],[10,"get_ident","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["keyword"],"name":"option"}}],[10,"get_entid","","",1,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["knownentid"],"name":"option"}}],[10,"attribute_for_entid","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["attribute"],"name":"option"}}],[10,"attribute_for_ident","","",1,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"option"}}],[10,"is_attribute","","Return true if the provided entid identifies an attribute in this schema.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"identifies_attribute","","Return true if the provided ident identifies an attribute in this schema.",1,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[10,"component_attributes","","",1,null],[3,"KnownEntid","","An entid that's either already in the store, or newly allocated to a tempid. TODO: we'd like to link this in some way to the lifetime of a particular PartitionMap.",null,null],[12,"0","","",2,null],[3,"Keyword","","A keyword is a symbol, optionally with a namespace, that prints with a leading colon. This concept is imported from Clojure, as it features in EDN and the query syntax that we use.",null,null],[3,"Schema","","Represents a Mentat schema.",null,null],[12,"entid_map","","Map entid->ident.",3,null],[12,"ident_map","","Map ident->entid.",3,null],[12,"attribute_map","","Map entid->attribute flags.",3,null],[12,"component_attributes","","Maintain a vec of unique attribute IDs for which the corresponding attribute in `attribute_map` has `.component == true`.",3,null],[4,"Binding","","The values bound in a query specification can be:",null,null],[13,"Scalar","","",4,null],[13,"Vec","","",4,null],[13,"Map","","",4,null],[4,"TypedValue","","Represents a value that can be stored in a Mentat store.",null,null],[13,"Ref","","",5,null],[13,"Boolean","","",5,null],[13,"Long","","",5,null],[13,"Double","","",5,null],[13,"Instant","","",5,null],[13,"String","","",5,null],[13,"Keyword","","",5,null],[13,"Uuid","","",5,null],[3,"Uuid","","A Universally Unique Identifier (UUID).",null,null],[3,"Utc","","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[4,"ValueType","","The attribute of each Mentat assertion has a :db/valueType constraining the value to a particular set.  Mentat recognizes the following :db/valueType values.",null,null],[13,"Ref","","",6,null],[13,"Boolean","","",6,null],[13,"Instant","","",6,null],[13,"Long","","",6,null],[13,"Double","","",6,null],[13,"String","","",6,null],[13,"Keyword","","",6,null],[13,"Uuid","","",6,null],[4,"FindSpec","","A definition of the first part of a find query: the `[:find ?foo ?bar…]` bit.",null,null],[13,"FindRel","","Returns an array of arrays, represented as a single array with length a multiple of width.",7,null],[13,"FindColl","","Returns an array of scalars, usually homogeneous. This is equivalent to mapping over the results of a `FindRel`, returning the first value of each.",7,null],[13,"FindTuple","","Returns a single tuple: a heterogeneous array of scalars. Equivalent to taking the first result from a `FindRel`.",7,null],[13,"FindScalar","","Returns a single scalar value. Equivalent to taking the first result from a `FindColl`.",7,null],[17,"CORE_SCHEMA_VERSION","","",null,null],[17,"DB_SCHEMA_CORE","","",null,null],[6,"AttributeSet","","",null,null],[3,"TxObserver","","",null,null],[3,"TxReport","","A transaction report summarizes an applied transaction.",null,null],[12,"tx_id","","The transaction ID of the transaction.",8,null],[12,"tx_instant","","The timestamp when the transaction began to be committed.",8,null],[12,"tempids","","A map from string literal tempid to resolved or allocated entid.",8,null],[5,"new_connection","","",null,{"inputs":[{"name":"t"}],"output":{"generics":["connection","error"],"name":"result"}}],[3,"ParseError","","",null,null],[12,"line","","",9,null],[12,"column","","",9,null],[12,"offset","","",9,null],[12,"expected","","",9,null],[3,"DbError","","",null,null],[4,"AlgebrizerError","","",null,null],[13,"DuplicateVariableError","","",10,null],[13,"UnsupportedArgument","","",10,null],[13,"InputTypeDisagreement","","",10,null],[13,"InvalidNumberOfArguments","","",10,null],[13,"InvalidArgument","","",10,null],[13,"InvalidArgumentType","","",10,null],[13,"InvalidGroundConstant","","",10,null],[13,"InvalidLimit","","",10,null],[13,"GroundBindingsMismatch","","",10,null],[13,"UnrecognizedIdent","","",10,null],[13,"UnknownFunction","","",10,null],[13,"UnknownLimitVar","","",10,null],[13,"UnboundVariable","","",10,null],[13,"NonMatchingVariablesInOrClause","","",10,null],[13,"NonMatchingVariablesInNotClause","","",10,null],[13,"InvalidBinding","","",10,null],[13,"EdnParseError","","",10,null],[4,"ProjectorError","","",null,null],[13,"NotYetImplemented","","We're just not done yet.  Message that the feature is recognized but not yet implemented.",11,null],[13,"CannotProjectImpossibleBinding","","",11,null],[13,"CannotApplyAggregateOperationToTypes","","",11,null],[13,"InvalidProjection","","",11,null],[13,"UnboundVariable","","",11,null],[13,"NoTypeAvailableForVariable","","",11,null],[13,"UnexpectedResultsType","","",11,null],[13,"AmbiguousAggregates","","",11,null],[13,"RusqliteError","","",11,null],[13,"DbError","","",11,null],[13,"PullError","","",11,null],[4,"PullError","","",null,null],[13,"UnnamedAttribute","","",12,null],[13,"RepeatedDbId","","",12,null],[13,"DbError","","",12,null],[4,"SQLError","","",null,null],[13,"InvalidParameterName","","",13,null],[13,"BindParamCouldBeGenerated","","",13,null],[3,"PlainSymbol","","A simplification of Clojure's Symbol.",null,null],[12,"0","","",14,null],[3,"QueryInputs","","Define the inputs to a query. This is in two parts: a set of values known now, and a set of types known now. The separate map of types is to allow queries to be algebrized without full knowledge of the bindings that will be used at execution time. When built correctly, `types` is guaranteed to contain the types of `values` -- use `QueryInputs::new` or `QueryInputs::with_values` to construct an instance.",null,null],[3,"QueryOutput","","",null,null],[12,"spec","","",15,null],[12,"results","","",15,null],[4,"QueryResults","","",null,null],[13,"Scalar","","",16,null],[13,"Tuple","","",16,null],[13,"Coll","","",16,null],[13,"Rel","","",16,null],[3,"RelResult","","The result you get from a 'rel' query, like:",null,null],[12,"width","","",17,null],[12,"values","","",17,null],[3,"Variable","","",null,null],[12,"0","","",18,null],[0,"errors","","",null,null],[4,"MentatError","mentat::errors","",null,null],[13,"BadUuid","","",19,null],[13,"PathAlreadyExists","","",19,null],[13,"UnboundVariables","","",19,null],[13,"InvalidArgumentName","","",19,null],[13,"UnknownAttribute","","",19,null],[13,"InvalidVocabularyVersion","","",19,null],[13,"ConflictingAttributeDefinitions","","",19,null],[13,"ExistingVocabularyTooNew","","",19,null],[13,"UnexpectedCoreSchema","","",19,null],[13,"UnexpectedLostTransactRace","","",19,null],[13,"MissingCoreVocabulary","","",19,null],[13,"PreparedQuerySchemaMismatch","","",19,null],[13,"ValueTypeMismatch","","",19,null],[13,"IoError","","",19,null],[13,"RusqliteError","","",19,null],[13,"EdnParseError","","",19,null],[13,"DbError","","",19,null],[13,"AlgebrizerError","","",19,null],[13,"ProjectorError","","",19,null],[13,"PullError","","",19,null],[13,"SQLError","","",19,null],[6,"Result","","",null,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",19,{"inputs":[{"name":"error"}],"output":{"name":"mentaterror"}}],[11,"from","","",19,{"inputs":[{"name":"error"}],"output":{"name":"mentaterror"}}],[11,"from","","",19,{"inputs":[{"name":"parseerror"}],"output":{"name":"mentaterror"}}],[11,"from","","",19,{"inputs":[{"name":"dberror"}],"output":{"name":"mentaterror"}}],[11,"from","","",19,{"inputs":[{"name":"algebrizererror"}],"output":{"name":"mentaterror"}}],[11,"from","","",19,{"inputs":[{"name":"projectorerror"}],"output":{"name":"mentaterror"}}],[11,"from","","",19,{"inputs":[{"name":"pullerror"}],"output":{"name":"mentaterror"}}],[11,"from","","",19,{"inputs":[{"name":"sqlerror"}],"output":{"name":"mentaterror"}}],[0,"conn","mentat","",null,null],[3,"Metadata","mentat::conn","Connection metadata required to query from, or apply transactions to, a Mentat store.",null,null],[12,"generation","","",20,null],[12,"partition_map","","",20,null],[12,"schema","","",20,null],[12,"attribute_cache","","",20,null],[3,"Conn","","A mutable, safe reference to the current Mentat store.",null,null],[3,"InProgress","","Represents an in-progress, not yet committed, set of changes to the store. Call `commit` to commit your changes, or `rollback` to discard them. A transaction is held open until you do so. Your changes will be implicitly dropped along with this struct.",null,null],[3,"InProgressRead","","Represents an in-progress set of reads to the store. Just like `InProgress`, which is read-write, but only allows for reads.",null,null],[4,"CacheDirection","","",null,null],[13,"Forward","","",21,null],[13,"Reverse","","",21,null],[13,"Both","","",21,null],[4,"CacheAction","","",null,null],[13,"Register","","",22,null],[13,"Deregister","","",22,null],[8,"Queryable","","",null,null],[10,"q_explain","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryexplanation"],"name":"result"}}],[10,"q_once","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryoutput"],"name":"result"}}],[10,"q_prepare","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"preparedresult"}}],[10,"lookup_values_for_attribute","","",23,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["vec"],"name":"result"}}],[10,"lookup_value_for_attribute","","",23,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["option"],"name":"result"}}],[8,"Pullable","","",null,null],[10,"pull_attributes_for_entities","","",24,{"inputs":[{"name":"self"},{"name":"e"},{"name":"a"}],"output":{"generics":["btreemap"],"name":"result"}}],[10,"pull_attributes_for_entity","","",24,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"a"}],"output":{"generics":["structuredmap"],"name":"result"}}],[8,"Syncable","","",null,null],[10,"sync","","",25,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":{"generics":["error"],"name":"result"}}],[11,"q_once","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryoutput"],"name":"result"}}],[11,"q_prepare","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"preparedresult"}}],[11,"q_explain","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryexplanation"],"name":"result"}}],[11,"lookup_values_for_attribute","","",26,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["vec"],"name":"result"}}],[11,"lookup_value_for_attribute","","",26,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["option"],"name":"result"}}],[11,"pull_attributes_for_entities","","",26,{"inputs":[{"name":"self"},{"name":"e"},{"name":"a"}],"output":{"generics":["btreemap"],"name":"result"}}],[11,"pull_attributes_for_entity","","",26,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"a"}],"output":{"generics":["structuredmap"],"name":"result"}}],[11,"q_once","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryoutput"],"name":"result"}}],[11,"q_prepare","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"preparedresult"}}],[11,"q_explain","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryexplanation"],"name":"result"}}],[11,"lookup_values_for_attribute","","",27,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["vec"],"name":"result"}}],[11,"lookup_value_for_attribute","","",27,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["option"],"name":"result"}}],[11,"pull_attributes_for_entities","","",27,{"inputs":[{"name":"self"},{"name":"e"},{"name":"a"}],"output":{"generics":["btreemap"],"name":"result"}}],[11,"pull_attributes_for_entity","","",27,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"a"}],"output":{"generics":["structuredmap"],"name":"result"}}],[11,"entid_for_type","","",26,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"get_ident","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"get_entid","","",26,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"attribute_for_entid","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"attribute_for_ident","","",26,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"option"}}],[11,"is_attribute","","Return true if the provided entid identifies an attribute in this schema.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"identifies_attribute","","Return true if the provided ident identifies an attribute in this schema.",26,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"component_attributes","","",26,null],[11,"entid_for_type","","",27,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"get_ident","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"get_entid","","",27,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"attribute_for_entid","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"attribute_for_ident","","",27,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"option"}}],[11,"is_attribute","","Return true if the provided entid identifies an attribute in this schema.",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"identifies_attribute","","Return true if the provided ident identifies an attribute in this schema.",27,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"component_attributes","","",27,null],[11,"builder","","",27,{"inputs":[{"name":"self"}],"output":{"name":"inprogressbuilder"}}],[11,"use_caching","","Choose whether to use in-memory caches for running queries.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"transact_builder","","If you only have a reference to an `InProgress`, you can't use the easy builder. This exists so you can make your own.",27,{"inputs":[{"name":"self"},{"name":"termbuilder"}],"output":{"generics":["txreport"],"name":"result"}}],[11,"transact_terms","","",27,{"inputs":[{"name":"self"},{"name":"i"},{"generics":["tempid"],"name":"internset"}],"output":{"generics":["txreport"],"name":"result"}}],[11,"transact_entities","","",27,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["txreport"],"name":"result"}}],[11,"transact","","",27,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["txreport"],"name":"result"}}],[11,"import","","",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["txreport"],"name":"result"}}],[11,"rollback","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"commit","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"cache","","",27,{"inputs":[{"name":"self"},{"name":"keyword"},{"name":"cachedirection"},{"name":"cacheaction"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"cachedirection"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"cachedirection"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"cacheaction"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"cacheaction"}],"output":{"name":"bool"}}],[11,"connect","","",28,{"inputs":[{"name":"connection"}],"output":{"generics":["conn"],"name":"result"}}],[11,"current_schema","","Yield a clone of the current `Schema` instance.",28,{"inputs":[{"name":"self"}],"output":{"generics":["schema"],"name":"arc"}}],[11,"current_cache","","",28,{"inputs":[{"name":"self"}],"output":{"name":"sqliteattributecache"}}],[11,"q_once","","Query the Mentat store, using the given connection and the current metadata.",28,{"inputs":[{"name":"self"},{"name":"connection"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryoutput"],"name":"result"}}],[11,"q_uncached","","Query the Mentat store, using the given connection and the current metadata, but without using the cache.",28,{"inputs":[{"name":"self"},{"name":"connection"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryoutput"],"name":"result"}}],[11,"q_prepare","","",28,{"inputs":[{"name":"self"},{"name":"connection"},{"name":"str"},{"name":"t"}],"output":{"name":"preparedresult"}}],[11,"q_explain","","",28,{"inputs":[{"name":"self"},{"name":"connection"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryexplanation"],"name":"result"}}],[11,"pull_attributes_for_entities","","",28,{"inputs":[{"name":"self"},{"name":"connection"},{"name":"e"},{"name":"a"}],"output":{"generics":["btreemap"],"name":"result"}}],[11,"pull_attributes_for_entity","","",28,{"inputs":[{"name":"self"},{"name":"connection"},{"name":"entid"},{"name":"a"}],"output":{"generics":["structuredmap"],"name":"result"}}],[11,"lookup_values_for_attribute","","",28,{"inputs":[{"name":"self"},{"name":"connection"},{"name":"entid"},{"name":"keyword"}],"output":{"generics":["vec"],"name":"result"}}],[11,"lookup_value_for_attribute","","",28,{"inputs":[{"name":"self"},{"name":"connection"},{"name":"entid"},{"name":"keyword"}],"output":{"generics":["option"],"name":"result"}}],[11,"begin_read","","",28,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"generics":["inprogressread"],"name":"result"}}],[11,"begin_uncached_read","","",28,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"generics":["inprogressread"],"name":"result"}}],[11,"begin_transaction","","IMMEDIATE means 'start the transaction now, but don't exclude readers'. It prevents other connections from taking immediate or exclusive transactions. This is appropriate for our writes and `InProgress`: it means we are ready to write whenever we want to, and nobody else can start a transaction that's not `DEFERRED`, but we don't need exclusivity yet.",28,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"generics":["inprogress"],"name":"result"}}],[11,"transact","","Transact entities against the Mentat store, using the given connection and the current metadata.",28,{"inputs":[{"name":"self"},{"name":"connection"},{"name":"b"}],"output":{"generics":["txreport"],"name":"result"}}],[11,"cache","","Adds or removes the values of a given attribute to an in-memory cache. The attribute should be a namespaced string: e.g., `:foo/bar`. `cache_action` determines if the attribute should be added or removed from the cache. CacheAction::Add is idempotent - each attribute is only added once. CacheAction::Remove throws an error if the attribute does not currently exist in the cache.",28,{"inputs":[{"name":"self"},{"name":"connection"},{"name":"schema"},{"name":"keyword"},{"name":"cachedirection"},{"name":"cacheaction"}],"output":{"name":"result"}}],[11,"register_observer","","",28,{"inputs":[{"name":"self"},{"name":"string"},{"generics":["txobserver"],"name":"arc"}],"output":null}],[11,"unregister_observer","","",28,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[0,"entity_builder","mentat","",null,null],[3,"TermBuilder","mentat::entity_builder","",null,null],[3,"EntityBuilder","","",null,null],[3,"InProgressBuilder","","",null,null],[6,"Terms","","",null,null],[8,"BuildTerms","","",null,null],[10,"named_tempid","","",29,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"tempidhandle"}}],[10,"describe_tempid","","",29,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"entitybuilder"}}],[10,"describe","","",29,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"entitybuilder"}}],[10,"add","","",29,{"inputs":[{"name":"self"},{"name":"e"},{"name":"knownentid"},{"name":"v"}],"output":{"name":"result"}}],[10,"retract","","",29,{"inputs":[{"name":"self"},{"name":"e"},{"name":"knownentid"},{"name":"v"}],"output":{"name":"result"}}],[8,"IntoThing","","",null,null],[10,"into_thing","","",30,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromThing","","",null,null],[10,"from_thing","","",31,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"named_tempid","","",32,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"tempidhandle"}}],[11,"describe_tempid","","",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"entitybuilder"}}],[11,"describe","","",32,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"entitybuilder"}}],[11,"add","","",32,{"inputs":[{"name":"self"},{"name":"e"},{"name":"knownentid"},{"name":"v"}],"output":{"name":"result"}}],[11,"retract","","",32,{"inputs":[{"name":"self"},{"name":"e"},{"name":"knownentid"},{"name":"v"}],"output":{"name":"result"}}],[11,"build","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["terms"],"name":"result"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"termbuilder"}}],[11,"is_empty","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"numbered_tempid","","",32,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"tempidhandle"}}],[11,"finish","","",33,null],[11,"add","","",33,{"inputs":[{"name":"self"},{"name":"knownentid"},{"name":"v"}],"output":{"name":"result"}}],[11,"retract","","",33,{"inputs":[{"name":"self"},{"name":"knownentid"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","",34,{"inputs":[{"name":"inprogress"}],"output":{"name":"self"}}],[11,"transact","","Build the terms from this builder and transact them against the current `InProgress`. This method always returns the `InProgress` -- failure doesn't imply an automatic rollback.",34,null],[11,"commit","","Transact the contents of the builder and commit the `InProgress`. If any step fails, roll back. Return the `TxReport`.",34,{"inputs":[{"name":"self"}],"output":{"generics":["txreport"],"name":"result"}}],[11,"named_tempid","","",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"tempidhandle"}}],[11,"describe_tempid","","",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["inprogressbuilder"],"name":"entitybuilder"}}],[11,"describe","","",34,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["inprogressbuilder"],"name":"entitybuilder"}}],[11,"add","","",34,{"inputs":[{"name":"self"},{"name":"e"},{"name":"knownentid"},{"name":"v"}],"output":{"name":"result"}}],[11,"retract","","",34,{"inputs":[{"name":"self"},{"name":"e"},{"name":"knownentid"},{"name":"v"}],"output":{"name":"result"}}],[11,"add_kw","","",34,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"},{"name":"v"}],"output":{"name":"result"}}],[11,"retract_kw","","",34,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"},{"name":"v"}],"output":{"name":"result"}}],[11,"add_kw","","",33,{"inputs":[{"name":"self"},{"name":"keyword"},{"name":"v"}],"output":{"name":"result"}}],[11,"retract_kw","","",33,{"inputs":[{"name":"self"},{"name":"keyword"},{"name":"v"}],"output":{"name":"result"}}],[11,"transact","","Build the terms from this builder and transact them against the current `InProgress`. This method always returns the `InProgress` -- failure doesn't imply an automatic rollback.",33,null],[11,"commit","","Transact the contents of the builder and commit the `InProgress`. If any step fails, roll back. Return the `TxReport`.",33,{"inputs":[{"name":"self"}],"output":{"generics":["txreport"],"name":"result"}}],[0,"query","mentat","",null,null],[3,"QueryInputs","mentat::query","Define the inputs to a query. This is in two parts: a set of values known now, and a set of types known now. The separate map of types is to allow queries to be algebrized without full knowledge of the bindings that will be used at execution time. When built correctly, `types` is guaranteed to contain the types of `values` -- use `QueryInputs::new` or `QueryInputs::with_values` to construct an instance.",null,null],[3,"Keyword","","A keyword is a symbol, optionally with a namespace, that prints with a leading colon. This concept is imported from Clojure, as it features in EDN and the query syntax that we use.",null,null],[3,"PlainSymbol","","A simplification of Clojure's Symbol.",null,null],[12,"0","","",14,null],[3,"Variable","","",null,null],[12,"0","","",18,null],[3,"Known","","A convenience wrapper around things known in memory: the schema and caches. We use a trait object here to avoid making dozens of functions generic over the type of the cache. If performance becomes a concern, we should hard-code specific kinds of cache right here, and/or eliminate the Option.",null,null],[12,"schema","","",35,null],[12,"cache","","",35,null],[3,"QueryOutput","","",null,null],[12,"spec","","",15,null],[12,"results","","",15,null],[4,"QueryResults","","",null,null],[13,"Scalar","","",16,null],[13,"Tuple","","",16,null],[13,"Coll","","",16,null],[13,"Rel","","",16,null],[3,"RelResult","","The result you get from a 'rel' query, like:",null,null],[12,"width","","",17,null],[12,"values","","",17,null],[3,"QueryPlanStep","","A single row in the output of SQLite's `EXPLAIN QUERY PLAN`. See https://www.sqlite.org/eqp.html for an explanation of each field.",null,null],[12,"select_id","","",36,null],[12,"order","","",36,null],[12,"from","","",36,null],[12,"detail","","",36,null],[4,"PreparedQuery","","",null,null],[13,"Empty","","",37,null],[12,"find_spec","mentat::query::PreparedQuery","",37,null],[13,"Constant","mentat::query","",37,null],[12,"select","mentat::query::PreparedQuery","",37,null],[13,"Bound","mentat::query","",37,null],[12,"statement","mentat::query::PreparedQuery","",37,null],[12,"schema","","",37,null],[12,"connection","","",37,null],[12,"args","","",37,null],[12,"projector","","",37,null],[4,"QueryExplanation","mentat::query","A struct describing information about how Mentat would execute a query.",null,null],[13,"KnownEmpty","","A query known in advance to be empty, and why we believe that.",38,null],[13,"KnownConstant","","A query known in advance to return a constant value.",38,null],[13,"ExecutionPlan","","A query that takes actual work to execute.",38,null],[12,"query","mentat::query::QueryExplanation","The translated query and any bindings.",38,null],[12,"steps","","The output of SQLite's `EXPLAIN QUERY PLAN`.",38,null],[5,"lookup_value","mentat::query","Return a single value for the provided entity and attribute. If the attribute is multi-valued, an arbitrary value is returned. If no value is present for that entity, `None` is returned. If `attribute` isn't an attribute, `None` is returned.",null,{"inputs":[{"name":"connection"},{"name":"known"},{"name":"e"},{"name":"a"}],"output":{"generics":["option"],"name":"result"}}],[5,"lookup_values","","",null,{"inputs":[{"name":"connection"},{"name":"known"},{"name":"e"},{"name":"a"}],"output":{"generics":["vec"],"name":"result"}}],[5,"lookup_value_for_attribute","","Return a single value for the provided entity and attribute. If the attribute is multi-valued, an arbitrary value is returned. If no value is present for that entity, `None` is returned. If `attribute` doesn't name an attribute, an error is returned.",null,{"inputs":[{"name":"connection"},{"name":"known"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["option"],"name":"result"}}],[5,"lookup_values_for_attribute","","",null,{"inputs":[{"name":"connection"},{"name":"known"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["vec"],"name":"result"}}],[5,"q_once","","Take an EDN query string, a reference to an open SQLite connection, a Mentat schema, and an optional collection of input bindings (which should be keyed by `\"?varname\"`), and execute the query immediately, blocking the current thread. Returns a structure that corresponds to the kind of input query, populated with `TypedValue` instances. The caller is responsible for ensuring that the SQLite connection has an open transaction if isolation is required.",null,{"inputs":[{"name":"connection"},{"name":"known"},{"name":"str"},{"name":"t"}],"output":{"name":"queryexecutionresult"}}],[5,"q_uncached","","Just like `q_once`, but doesn't use any cached values.",null,{"inputs":[{"name":"connection"},{"name":"schema"},{"name":"str"},{"name":"t"}],"output":{"name":"queryexecutionresult"}}],[5,"q_prepare","","",null,{"inputs":[{"name":"connection"},{"name":"known"},{"name":"str"},{"name":"t"}],"output":{"name":"preparedresult"}}],[5,"q_explain","","",null,{"inputs":[{"name":"connection"},{"name":"known"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryexplanation"],"name":"result"}}],[6,"QueryExecutionResult","","",null,null],[6,"PreparedResult","","",null,null],[8,"IntoResult","","",null,null],[10,"into_scalar_result","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"into_coll_result","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[10,"into_tuple_result","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"into_rel_result","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["relresult"],"name":"result"}}],[11,"run","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"queryexecutionresult"}}],[11,"into_scalar_result","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"into_coll_result","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"into_tuple_result","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"into_rel_result","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["relresult"],"name":"result"}}],[0,"query_builder","mentat","",null,null],[3,"QueryBuilder","mentat::query_builder","",null,null],[11,"new","","",41,{"inputs":[{"name":"store"},{"name":"t"}],"output":{"name":"querybuilder"}}],[11,"bind_value","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"bind_ref_from_kw","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"keyword"}],"output":{"name":"result"}}],[11,"bind_ref","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"bind_long","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":{"name":"self"}}],[11,"bind_instant","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":{"name":"self"}}],[11,"bind_date_time","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["utc"],"name":"datetime"}],"output":{"name":"self"}}],[11,"bind_type","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"valuetype"}],"output":{"name":"self"}}],[11,"execute","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["queryoutput"],"name":"result"}}],[11,"execute_scalar","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"execute_coll","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"execute_tuple","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"execute_rel","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["relresult"],"name":"result"}}],[0,"store","mentat","",null,null],[3,"Store","mentat::store","A convenience wrapper around a single SQLite connection and a Conn. This is suitable for applications that don't require complex connection management.",null,null],[11,"open","","Open a store at the supplied path, ensuring that it includes the bootstrap schema.",42,{"inputs":[{"name":"str"}],"output":{"generics":["store"],"name":"result"}}],[11,"open_empty","","Returns a totally blank store with no bootstrap schema. Use `open` instead.",42,{"inputs":[{"name":"str"}],"output":{"generics":["store"],"name":"result"}}],[11,"transact","","",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["txreport"],"name":"result"}}],[11,"sqlite_mut","","Intended for use from tests.",42,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"dismantle","","",42,null],[11,"conn","","",42,{"inputs":[{"name":"self"}],"output":{"name":"conn"}}],[11,"begin_read","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["inprogressread"],"name":"result"}}],[11,"begin_transaction","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["inprogress"],"name":"result"}}],[11,"cache","","",42,{"inputs":[{"name":"self"},{"name":"keyword"},{"name":"cachedirection"}],"output":{"name":"result"}}],[11,"register_observer","","",42,{"inputs":[{"name":"self"},{"name":"string"},{"generics":["txobserver"],"name":"arc"}],"output":null}],[11,"unregister_observer","","",42,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"q_once","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryoutput"],"name":"result"}}],[11,"q_prepare","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"preparedresult"}}],[11,"q_explain","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryexplanation"],"name":"result"}}],[11,"lookup_values_for_attribute","","",42,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["vec"],"name":"result"}}],[11,"lookup_value_for_attribute","","",42,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["option"],"name":"result"}}],[11,"pull_attributes_for_entities","","",42,{"inputs":[{"name":"self"},{"name":"e"},{"name":"a"}],"output":{"generics":["btreemap"],"name":"result"}}],[11,"pull_attributes_for_entity","","",42,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"a"}],"output":{"generics":["structuredmap"],"name":"result"}}],[11,"sync","","",42,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":{"generics":["error"],"name":"result"}}],[0,"vocabulary","mentat","This module exposes an interface for programmatic management of vocabularies.",null,null],[0,"attribute","mentat::vocabulary","",null,null],[4,"Unique","mentat::vocabulary::attribute","",null,null],[13,"Value","","",43,null],[13,"Identity","","",43,null],[3,"AttributeBuilder","mentat::vocabulary","",null,null],[12,"value_type","","",44,null],[12,"multival","","",44,null],[12,"unique","","",44,null],[12,"index","","",44,null],[12,"fulltext","","",44,null],[12,"component","","",44,null],[12,"no_history","","",44,null],[3,"Definition","","A definition of an attribute that is independent of a particular store.",null,null],[12,"name","","",45,null],[12,"version","","",45,null],[12,"attributes","","",45,null],[12,"pre","","",45,null],[12,"post","","",45,null],[3,"Vocabulary","","A definition of a vocabulary as retrieved from a particular store.",null,null],[12,"entity","","",46,null],[12,"version","","",46,null],[3,"Vocabularies","","A collection of named `Vocabulary` instances, as retrieved from the store.",null,null],[12,"0","","",47,null],[3,"SimpleVocabularySource","","A convenience struct to package simple `pre` and `post` functions with a collection of vocabulary `Definition`s.",null,null],[12,"definitions","","",48,null],[12,"pre","","",48,null],[12,"post","","",48,null],[4,"VocabularyCheck","","This enum captures the various relationships between a particular vocabulary pair — one `Definition` and one `Vocabulary`, if present.",null,null],[13,"NotPresent","","The provided definition is not already present in the store.",49,null],[13,"Present","","The provided definition is present in the store, and all of its attributes exist.",49,null],[13,"PresentButNeedsUpdate","","The provided definition is present in the store with an earlier version number.",49,null],[12,"older_version","mentat::vocabulary::VocabularyCheck","",49,null],[13,"PresentButTooNew","mentat::vocabulary","The provided definition is present in the store with a more recent version number.",49,null],[12,"newer_version","mentat::vocabulary::VocabularyCheck","",49,null],[13,"PresentButMissingAttributes","mentat::vocabulary","The provided definition is present in the store, but some of its attributes are not.",49,null],[12,"attributes","mentat::vocabulary::VocabularyCheck","",49,null],[4,"VocabularyOutcome","mentat::vocabulary","This enum captures the outcome of attempting to ensure that a vocabulary definition is present and up-to-date in the store.",null,null],[13,"Installed","","The vocabulary was absent and has been installed.",50,null],[13,"InstalledMissingAttributes","","The vocabulary was present with this version, but some attributes were absent. They have been installed.",50,null],[13,"Existed","","The vocabulary was present, at the correct version, and all attributes were present.",50,null],[13,"Upgraded","","The vocabulary was present, at an older version, and it has been upgraded. Any missing attributes were installed.",50,null],[6,"Version","","",null,null],[6,"Datom","","",null,null],[8,"HasVocabularies","","This trait captures the ability to retrieve and describe stored vocabularies.",null,null],[10,"read_vocabularies","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["vocabularies"],"name":"result"}}],[10,"read_vocabulary_named","","",51,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["option"],"name":"result"}}],[8,"VersionedStore","","This trait captures the ability of a store to check and install/upgrade vocabularies.",null,null],[11,"check_vocabulary","","Check whether the vocabulary described by the provided metadata is present in the store.",52,{"inputs":[{"name":"self"},{"name":"definition"}],"output":{"generics":["vocabularycheck"],"name":"result"}}],[10,"ensure_vocabulary","","Check whether the provided vocabulary is present in the store. If it isn't, make it so.",52,{"inputs":[{"name":"self"},{"name":"definition"}],"output":{"generics":["vocabularyoutcome"],"name":"result"}}],[10,"ensure_vocabularies","","Check whether the provided vocabularies are present in the store at the correct version and with all defined attributes. If any are not, invoke the `pre` function on the provided `VocabularySource`, install or upgrade the necessary vocabularies, then invoke `post`. Returns `Ok` if all of these steps succeed.",52,{"inputs":[{"name":"self"},{"name":"vocabularysource"}],"output":{"generics":["btreemap"],"name":"result"}}],[11,"verify_core_schema","","Make sure that our expectations of the core vocabulary — basic types and attributes — are met.",52,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VocabularyStatus","","`VocabularyStatus` is passed to `pre` function when attempting to add or upgrade vocabularies via `ensure_vocabularies`. This is how you can find the status and versions of existing vocabularies — you can retrieve the requested definition and the resulting `VocabularyCheck` by name.",null,null],[10,"get","","",53,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"option"}}],[10,"version","","",53,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["version"],"name":"option"}}],[8,"VocabularySource","","Implement `VocabularySource` to have full programmatic control over how a set of `Definition`s are checked against and transacted into a store.",null,null],[10,"definitions","","Called to obtain the list of `Definition`s to install. This will be called before `pre`.",54,{"inputs":[{"name":"self"}],"output":{"generics":["definition"],"name":"vec"}}],[11,"pre","","Called before the supplied `Definition`s are transacted. Do not commit the `InProgress`. If this function returns `Err`, the entire vocabulary operation will fail.",54,{"inputs":[{"name":"self"},{"name":"inprogress"},{"name":"vocabularystatus"}],"output":{"name":"result"}}],[11,"post","","Called after the supplied `Definition`s are transacted. Do not commit the `InProgress`. If this function returns `Err`, the entire vocabulary operation will fail.",54,{"inputs":[{"name":"self"},{"name":"inprogress"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"definition"}}],[11,"no_op","","",45,{"inputs":[{"name":"inprogress"},{"name":"vocabulary"}],"output":{"name":"result"}}],[11,"new","","",45,{"inputs":[{"name":"n"},{"name":"version"},{"name":"a"}],"output":{"name":"definition"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vocabulary"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"vocabulary"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"vocabulary"}],"output":{"name":"bool"}}],[11,"attributes","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"vocabularies"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"vocabularies"}}],[11,"len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","",47,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["vocabulary"],"name":"option"}}],[11,"iter","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["keyword","vocabulary"],"name":"iter"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"vocabularycheck"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"vocabularycheck"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"vocabularyoutcome"}],"output":{"name":"bool"}}],[11,"ensure_vocabulary","mentat::conn","",27,{"inputs":[{"name":"self"},{"name":"definition"}],"output":{"generics":["vocabularyoutcome"],"name":"result"}}],[11,"ensure_vocabularies","","",27,{"inputs":[{"name":"self"},{"name":"vocabularysource"}],"output":{"generics":["btreemap"],"name":"result"}}],[11,"new","mentat::vocabulary","",48,{"inputs":[{"generics":["definition"],"name":"vec"},{"name":"option"},{"name":"option"}],"output":{"name":"simplevocabularysource"}}],[11,"with_definitions","","",48,{"inputs":[{"generics":["definition"],"name":"vec"}],"output":{"name":"simplevocabularysource"}}],[11,"pre","","",48,{"inputs":[{"name":"self"},{"name":"inprogress"},{"name":"vocabularystatus"}],"output":{"name":"result"}}],[11,"post","","",48,{"inputs":[{"name":"self"},{"name":"inprogress"}],"output":{"name":"result"}}],[11,"definitions","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["definition"],"name":"vec"}}],[14,"var","mentat","Produce the appropriate `Variable` for the provided valid ?-prefixed name. This lives here because we can't re-export macros: https://github.com/rust-lang/rust/issues/29638.",null,null],[14,"kw","","Produce the appropriate `Keyword` for the provided namespace and name. This lives here because we can't re-export macros: https://github.com/rust-lang/rust/issues/29638.",null,null],[14,"bail","","",null,null],[11,"flags","","Combine several attribute flags into a bitfield used in temporary search tables.",0,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"to_edn_value","","",0,{"inputs":[{"name":"self"},{"generics":["keyword"],"name":"option"}],"output":{"name":"value"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",55,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"cmp","","",55,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"deserialize","","",55,{"inputs":[{"name":"d"}],"output":{"generics":["uuid"],"name":"result"}}],[11,"rand","","",55,{"inputs":[{"name":"r"}],"output":{"name":"uuid"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"serialize","","",55,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default","","Returns the nil UUID, which is all zeroes",55,{"inputs":[],"output":{"name":"uuid"}}],[11,"partial_cmp","mentat::query","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"to_micros","mentat","",57,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clone","mentat::query","",18,{"inputs":[{"name":"self"}],"output":{"name":"variable"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"plainsymbol"}}],[11,"clone","mentat","",9,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"cmp","mentat::query","",14,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"ordering"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"ordering"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"ordering"}}],[11,"deserialize","","",56,{"inputs":[{"name":"__d"}],"output":{"generics":["keyword"],"name":"result"}}],[11,"hash","","",14,null],[11,"hash","","",56,null],[11,"hash","","",18,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"plainsymbol"}],"output":{"name":"bool"}}],[11,"eq","mentat","",9,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","mentat::query","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eq","mentat","",7,{"inputs":[{"name":"self"},{"name":"findspec"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"findspec"}],"output":{"name":"bool"}}],[11,"eq","mentat::query","",18,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"fmt","mentat","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","mentat::query","Print the keyword in EDN format.",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","Print the symbol in EDN format.",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","mentat","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","mentat::query","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_micros","mentat","",57,{"inputs":[{"name":"i64"}],"output":{"generics":["utc"],"name":"datetime"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"serialize","mentat::query","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_value","","",18,{"inputs":[{"name":"valueandspan"}],"output":{"generics":["variable"],"name":"option"}}],[11,"partial_cmp","mentat","",57,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"add","","",57,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"fix","","",58,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"from","","",57,{"inputs":[{"name":"systemtime"}],"output":{"generics":["utc"],"name":"datetime"}}],[11,"from","","",57,{"inputs":[{"name":"systemtime"}],"output":{"generics":["local"],"name":"datetime"}}],[11,"hour","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_minute","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_second","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_nanosecond","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"serialize","","Serialize into a rfc3339 time string",57,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"year","","",57,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",57,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",57,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month0","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day0","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal0","","",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"sub","","",57,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"from_str","","",57,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"from_str","","",57,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"from_str","","",57,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",57,null],[11,"deserialize","","",57,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"deserialize","","",57,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"deserialize","","",57,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_offset","","",58,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",58,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",58,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_utc_date","","",58,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",58,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"attribute"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"schema"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"partial_cmp","mentat::vocabulary::attribute","",43,{"inputs":[{"name":"self"},{"name":"unique"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","mentat","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"clone","mentat::vocabulary::attribute","",43,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"clone","mentat","",2,{"inputs":[{"name":"self"}],"output":{"name":"knownentid"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"schema"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"from","","",4,{"inputs":[{"generics":["binding"],"name":"vec"}],"output":{"name":"binding"}}],[11,"from","","",5,{"inputs":[{"name":"bool"}],"output":{"name":"typedvalue"}}],[11,"from","","",5,{"inputs":[{"name":"uuid"}],"output":{"name":"typedvalue"}}],[11,"from","","",5,{"inputs":[{"generics":["string"],"name":"box"}],"output":{"name":"typedvalue"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"typedvalue"}}],[11,"from","","",5,{"inputs":[{"generics":["keyword"],"name":"rc"}],"output":{"name":"typedvalue"}}],[11,"from","","",5,{"inputs":[{"generics":["string"],"name":"arc"}],"output":{"name":"typedvalue"}}],[11,"from","","",5,{"inputs":[{"name":"knownentid"}],"output":{"name":"typedvalue"}}],[11,"from","","",4,{"inputs":[{"name":"t"}],"output":{"name":"binding"}}],[11,"from","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"typedvalue"}}],[11,"from","","",5,{"inputs":[{"name":"keyword"}],"output":{"name":"typedvalue"}}],[11,"from","","",5,{"inputs":[{"generics":["utc"],"name":"datetime"}],"output":{"name":"typedvalue"}}],[11,"from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"typedvalue"}}],[11,"from","","",4,{"inputs":[{"name":"structuredmap"}],"output":{"name":"binding"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"typedvalue"}}],[11,"from","","",5,{"inputs":[{"generics":["keyword"],"name":"arc"}],"output":{"name":"typedvalue"}}],[11,"from","","",5,{"inputs":[{"generics":["string"],"name":"rc"}],"output":{"name":"typedvalue"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"ordering"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"ordering"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"ordering"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"ordering"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"ordering"}}],[11,"cmp","mentat::vocabulary::attribute","",43,{"inputs":[{"name":"self"},{"name":"unique"}],"output":{"name":"ordering"}}],[11,"deserialize","mentat","",5,{"inputs":[{"name":"__d"}],"output":{"generics":["typedvalue"],"name":"result"}}],[11,"hash","mentat::vocabulary::attribute","",43,null],[11,"hash","mentat","",0,null],[11,"hash","","",5,null],[11,"hash","","",6,null],[11,"hash","","",3,null],[11,"hash","","",2,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"eq","mentat::vocabulary::attribute","",43,{"inputs":[{"name":"self"},{"name":"unique"}],"output":{"name":"bool"}}],[11,"eq","mentat","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"sql_representation","","",6,null],[11,"value_type_tag","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"accommodates_integer","","Returns true if the provided integer is in the SQLite value space of this type. For example, `1` is how we encode `true`.",6,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"entid_for_type","","",3,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"get_ident","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"get_entid","","",3,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"attribute_for_entid","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"attribute_for_ident","","",3,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"option"}}],[11,"is_attribute","","Return true if the provided entid identifies an attribute in this schema.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"identifies_attribute","","Return true if the provided ident identifies an attribute in this schema.",3,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"component_attributes","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","mentat::vocabulary::attribute","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","mentat","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_u32","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_u32","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"valuetype"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","mentat::vocabulary","",44,{"inputs":[{"name":"self"}],"output":{"name":"attributebuilder"}}],[11,"clone","mentat","",8,{"inputs":[{"name":"self"}],"output":{"name":"txreport"}}],[11,"from_sql_value_pair","","Given a SQLite `value` and a `value_type_tag`, return the corresponding `TypedValue`.",5,{"inputs":[{"name":"value"},{"name":"i32"}],"output":{"generics":["typedvalue","dberror"],"name":"result"}}],[11,"from_edn_value","","Given an EDN `value`, return a corresponding Mentat `TypedValue`.",5,{"inputs":[{"name":"value"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"to_sql_value_pair","","Return the corresponding SQLite `value` and `value_type_tag` pair.",5,null],[11,"to_edn_value_pair","","Return the corresponding EDN `value` and `value_type` pair.",5,null],[11,"hash","","",8,null],[11,"hash","mentat::vocabulary","",44,null],[11,"fmt","mentat","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","mentat::vocabulary","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_typed_value","mentat","",5,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"valuetype"}],"output":{"generics":["typedvalue","dberror"],"name":"result"}}],[11,"into_entity_place","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["entityplace","dberror"],"name":"result"}}],[11,"as_tempid","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["tempid"],"name":"option"}}],[11,"partial_cmp","mentat::vocabulary","",44,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"partial_cmp","mentat","",8,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"cause","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"from","","",59,{"inputs":[{"generics":["dberrorkind"],"name":"context"}],"output":{"name":"dberror"}}],[11,"from","","",59,{"inputs":[{"name":"error"}],"output":{"name":"dberror"}}],[11,"from","","",59,{"inputs":[{"name":"dberrorkind"}],"output":{"name":"dberror"}}],[11,"validate","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["dberror"],"name":"result"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"ordering"}}],[11,"cmp","mentat::vocabulary","",44,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"ordering"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"eq","mentat","",8,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","mentat::vocabulary","",44,{"inputs":[],"output":{"name":"attributebuilder"}}],[11,"cause","mentat","",13,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cause","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"algebrizererror"}}],[11,"clone","mentat::query","",35,{"inputs":[{"name":"self"}],"output":{"name":"known"}}],[11,"from","mentat","",10,{"inputs":[{"name":"parseerror"}],"output":{"name":"algebrizererror"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"algebrizererror"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"algebrizererror"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","mentat::query","",60,{"inputs":[],"output":{"name":"queryinputs"}}],[11,"into_iter","","",17,null],[11,"cause","mentat","",11,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"clone","mentat::query","",17,{"inputs":[{"name":"self"}],"output":{"name":"relresult"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"queryresults"}}],[11,"from","","",16,{"inputs":[{"name":"queryoutput"}],"output":{"name":"queryresults"}}],[11,"from","mentat","",11,{"inputs":[{"name":"error"}],"output":{"name":"projectorerror"}}],[11,"from","","",11,{"inputs":[{"name":"dberror"}],"output":{"name":"projectorerror"}}],[11,"from","","",11,{"inputs":[{"name":"pullerror"}],"output":{"name":"projectorerror"}}],[11,"from","mentat::query","",17,{"inputs":[{"generics":["vec"],"name":"vec"}],"output":{"generics":["binding"],"name":"relresult"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"queryresults"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"queryresults"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"relresult"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"relresult"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"queryoutput"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"queryoutput"}],"output":{"name":"bool"}}],[11,"fmt","mentat","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","mentat::query","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","mentat","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"from","","",12,{"inputs":[{"name":"dberror"}],"output":{"name":"pullerror"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",57,null],[11,"date","","Retrieves a date component.",57,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",57,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",57,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",57,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",57,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",57,null],[11,"timezone","","Retrieves an associated time zone.",57,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",57,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",57,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",57,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",57,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",57,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",57,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",57,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",57,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",57,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",57,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",57,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",57,{"inputs":[{"name":"self"},{"name":"secondsformat"},{"name":"bool"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",57,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"plain","mentat::query","",56,{"inputs":[{"name":"t"}],"output":{"name":"keyword"}}],[11,"namespaced","","Creates a new `Keyword`.",56,{"inputs":[{"name":"n"},{"name":"t"}],"output":{"name":"keyword"}}],[11,"name","","",56,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"namespace","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"components","","",56,null],[11,"is_backward","","Whether this `Keyword` should be interpreted in reverse order. For example, the two following snippets are identical:",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_forward","","Whether this `Keyword` should be interpreted in forward order. See `symbols::Keyword::is_backward`.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_namespaced","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_reversed","","Returns a `Keyword` with the same namespace and a 'backward' name. See `symbols::Keyword::is_backward`.",56,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"unreversed","","If this `Keyword` is 'backward' (see `symbols::Keyword::is_backward`), return `Some('forward name')`; otherwise, return `None`.",56,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"new","mentat","",3,{"inputs":[{"generics":["keyword","i64"],"name":"btreemap"},{"generics":["i64","keyword"],"name":"btreemap"},{"generics":["i64","attribute"],"name":"btreemap"}],"output":{"name":"schema"}}],[11,"to_edn_value","","Returns an symbolic representation of the schema suitable for applying across Mentat stores.",3,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"update_component_attributes","","",3,null],[11,"val","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"is_congruent_with","","Returns true if the provided type is `Some` and matches this value's type, or if the provided type is `None`.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"matches_type","","",4,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"value_type","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["valuetype"],"name":"option"}}],[11,"into_known_entid","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"into_entid","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_kw","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"into_boolean","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_long","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_double","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_instant","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"into_timestamp","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"into_uuid","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"into_uuid_string","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"into_c_string","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_kw_c_string","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_uuid_c_string","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_congruent_with","","Returns true if the provided type is `Some` and matches this value's type, or if the provided type is `None`.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"matches_type","","",5,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"value_type","","",5,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"typed_ns_keyword","","Construct a new `TypedValue::Keyword` instance by cloning the provided values and wrapping them in a new `ValueRc`. This is expensive, so this might be best limited to tests.",5,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"typed_string","","Construct a new `TypedValue::String` instance by cloning the provided value and wrapping it in a new `ValueRc`. This is expensive, so this might be best limited to tests.",5,{"inputs":[{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"current_instant","","",5,{"inputs":[],"output":{"name":"typedvalue"}}],[11,"instant","","Construct a new `TypedValue::Instant` instance from the provided microsecond timestamp.",5,{"inputs":[{"name":"i64"}],"output":{"name":"typedvalue"}}],[11,"into_known_entid","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"into_entid","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_kw","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"into_boolean","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_long","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_double","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_instant","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"into_timestamp","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"into_c_string","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_kw_c_string","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_uuid_c_string","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_uuid","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"into_uuid_string","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"nil","","The 'nil UUID'.",55,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",55,{"inputs":[{"name":"uuidversion"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",55,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",55,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",55,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",55,{"inputs":[{"name":"self"}],"output":{"generics":["uuidvariant"],"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",55,{"inputs":[{"name":"self"}],"output":{"generics":["uuidversion"],"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",55,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",55,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",55,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",55,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and  counter portion of a V1 UUID.  If the supplied UUID is not V1, this  will return None",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",55,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",58,{"inputs":[],"output":{"generics":["utc"],"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",58,{"inputs":[],"output":{"generics":["utc"],"name":"datetime"}}],[11,"all_enums","","",6,{"inputs":[],"output":{"generics":["valuetype"],"name":"enumset"}}],[11,"into_keyword","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"from_keyword","","",6,{"inputs":[{"name":"keyword"}],"output":{"generics":["valuetype"],"name":"option"}}],[11,"into_typed_value","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"into_edn_value","","",6,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"is_numeric","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit_limited","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"expected_column_count","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"requires_distinct","","Returns true if the provided `FindSpec` cares about distinct results.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"columns","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"new","","",61,{"inputs":[{"generics":["i64"],"name":"btreeset"},{"name":"f"}],"output":{"name":"txobserver"}}],[11,"applicable_reports","","",61,{"inputs":[{"name":"self"},{"name":"indexmap"}],"output":{"generics":["i64","btreeset","randomstate"],"name":"indexmap"}}],[11,"kind","","",59,{"inputs":[{"name":"self"}],"output":{"name":"dberrorkind"}}],[11,"plain","mentat::query","",14,{"inputs":[{"name":"t"}],"output":{"name":"plainsymbol"}}],[11,"name","","Return the name of the symbol without any leading '?' or '$'.",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_var_symbol","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_src_symbol","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_value_sequence","","",60,{"inputs":[{"name":"vec"}],"output":{"name":"queryinputs"}}],[11,"with_type_sequence","","",60,{"inputs":[{"name":"vec"}],"output":{"name":"queryinputs"}}],[11,"with_values","","",60,{"inputs":[{"generics":["variable","typedvalue"],"name":"btreemap"}],"output":{"name":"queryinputs"}}],[11,"new","","",60,{"inputs":[{"generics":["variable","valuetype"],"name":"btreemap"},{"generics":["variable","typedvalue"],"name":"btreemap"}],"output":{"generics":["queryinputs","algebrizererror"],"name":"result"}}],[11,"empty_factory","","",15,{"inputs":[{"name":"findspec"}],"output":{"generics":["fn"],"name":"box"}}],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty","","",15,{"inputs":[{"name":"rc"}],"output":{"name":"queryoutput"}}],[11,"from_constants","","",15,{"inputs":[{"name":"rc"},{"generics":["variable","typedvalue"],"name":"btreemap"}],"output":{"name":"queryresults"}}],[11,"into_scalar","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["option","projectorerror"],"name":"result"}}],[11,"into_coll","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["vec","projectorerror"],"name":"result"}}],[11,"into_tuple","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["option","projectorerror"],"name":"result"}}],[11,"into_rel","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["relresult","projectorerror"],"name":"result"}}],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_scalar","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option","projectorerror"],"name":"result"}}],[11,"into_coll","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["vec","projectorerror"],"name":"result"}}],[11,"into_tuple","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option","projectorerror"],"name":"result"}}],[11,"into_rel","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["relresult","projectorerror"],"name":"result"}}],[11,"empty","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"relresult"}}],[11,"is_empty","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"row_count","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rows","","",17,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"row","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"as_str","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_string","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"plainsymbol"}}],[11,"from_valid_name","","Return a new `Variable`, assuming that the provided string is a valid name.",18,{"inputs":[{"name":"str"}],"output":{"name":"variable"}}],[11,"from_rc","","",18,{"inputs":[{"generics":["plainsymbol"],"name":"rc"}],"output":{"generics":["variable"],"name":"option"}}],[11,"from_symbol","","TODO: intern strings. #398.",18,{"inputs":[{"name":"plainsymbol"}],"output":{"generics":["variable"],"name":"option"}}],[11,"for_schema","","",35,{"inputs":[{"name":"schema"}],"output":{"name":"known"}}],[11,"new","","",35,{"inputs":[{"name":"schema"},{"generics":["cachedattributes"],"name":"option"}],"output":{"name":"known"}}],[11,"is_attribute_cached_reverse","","",35,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"is_attribute_cached_forward","","",35,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"get_values_for_entid","","",35,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"u"},{"name":"v"}],"output":{"generics":["vec"],"name":"option"}}],[11,"get_value_for_entid","","",35,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"u"},{"name":"v"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"get_entid_for_value","","",35,{"inputs":[{"name":"self"},{"name":"u"},{"name":"typedvalue"}],"output":{"generics":["i64"],"name":"option"}}],[11,"get_entids_for_value","","",35,{"inputs":[{"name":"self"},{"name":"u"},{"name":"typedvalue"}],"output":{"generics":["btreeset"],"name":"option"}}],[11,"into_typed_value","mentat::vocabulary::attribute","",43,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"helpful","mentat::vocabulary","Make a new AttributeBuilder for human consumption: it will help you by flipping relevant flags.",44,{"inputs":[],"output":{"name":"attributebuilder"}}],[11,"to_modify_attribute","","Make a new AttributeBuilder from an existing Attribute. This is important to allow retraction. Only attributes that we allow to change are duplicated here.",44,{"inputs":[{"name":"attribute"}],"output":{"name":"attributebuilder"}}],[11,"value_type","","",44,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"attributebuilder"}}],[11,"multival","","",44,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"attributebuilder"}}],[11,"non_unique","","",44,{"inputs":[{"name":"self"}],"output":{"name":"attributebuilder"}}],[11,"unique","","",44,{"inputs":[{"name":"self"},{"name":"unique"}],"output":{"name":"attributebuilder"}}],[11,"index","","",44,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"attributebuilder"}}],[11,"fulltext","","",44,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"attributebuilder"}}],[11,"component","","",44,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"attributebuilder"}}],[11,"no_history","","",44,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"attributebuilder"}}],[11,"validate_install_attribute","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["dberror"],"name":"result"}}],[11,"validate_alter_attribute","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["dberror"],"name":"result"}}],[11,"build","","",44,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"mutate","","",44,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"generics":["attributealteration"],"name":"vec"}}]],"paths":[[3,"Attribute"],[8,"HasSchema"],[3,"KnownEntid"],[3,"Schema"],[4,"Binding"],[4,"TypedValue"],[4,"ValueType"],[4,"FindSpec"],[3,"TxReport"],[3,"ParseError"],[4,"AlgebrizerError"],[4,"ProjectorError"],[4,"PullError"],[4,"SQLError"],[3,"PlainSymbol"],[3,"QueryOutput"],[4,"QueryResults"],[3,"RelResult"],[3,"Variable"],[4,"MentatError"],[3,"Metadata"],[4,"CacheDirection"],[4,"CacheAction"],[8,"Queryable"],[8,"Pullable"],[8,"Syncable"],[3,"InProgressRead"],[3,"InProgress"],[3,"Conn"],[8,"BuildTerms"],[8,"IntoThing"],[8,"FromThing"],[3,"TermBuilder"],[3,"EntityBuilder"],[3,"InProgressBuilder"],[3,"Known"],[3,"QueryPlanStep"],[4,"PreparedQuery"],[4,"QueryExplanation"],[8,"IntoResult"],[6,"QueryExecutionResult"],[3,"QueryBuilder"],[3,"Store"],[4,"Unique"],[3,"AttributeBuilder"],[3,"Definition"],[3,"Vocabulary"],[3,"Vocabularies"],[3,"SimpleVocabularySource"],[4,"VocabularyCheck"],[4,"VocabularyOutcome"],[8,"HasVocabularies"],[8,"VersionedStore"],[8,"VocabularyStatus"],[8,"VocabularySource"],[3,"Uuid"],[3,"Keyword"],[3,"DateTime"],[3,"Utc"],[3,"DbError"],[3,"QueryInputs"],[3,"TxObserver"]]};
searchIndex["mentat_cli"] = {"doc":"","items":[[4,"CliError","mentat_cli","",null,null],[13,"CommandParse","","",0,null],[5,"run","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"version","","Returns a version string.",null,{"inputs":[],"output":{"name":"str"}}],[0,"command_parser","","",null,null],[4,"Command","mentat_cli::command_parser","",null,null],[13,"Cache","","",1,null],[13,"Close","","",1,null],[13,"Exit","","",1,null],[13,"Help","","",1,null],[13,"Import","","",1,null],[13,"Open","","",1,null],[13,"OpenEmpty","","",1,null],[13,"OpenEncrypted","","",1,null],[13,"OpenEmptyEncrypted","","",1,null],[13,"Query","","",1,null],[13,"QueryExplain","","",1,null],[13,"QueryPrepared","","",1,null],[13,"Schema","","",1,null],[13,"Sync","","",1,null],[13,"Timer","","",1,null],[13,"Transact","","",1,null],[5,"command","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["command","error"],"name":"result"}}],[7,"COMMAND_CACHE","","",null,null],[7,"COMMAND_CLOSE","","",null,null],[7,"COMMAND_EXIT_LONG","","",null,null],[7,"COMMAND_EXIT_SHORT","","",null,null],[7,"COMMAND_HELP","","",null,null],[7,"COMMAND_IMPORT_LONG","","",null,null],[7,"COMMAND_IMPORT_SHORT","","",null,null],[7,"COMMAND_OPEN","","",null,null],[7,"COMMAND_OPEN_EMPTY","","",null,null],[7,"COMMAND_OPEN_ENCRYPTED","","",null,null],[7,"COMMAND_OPEN_EMPTY_ENCRYPTED","","",null,null],[7,"COMMAND_QUERY_LONG","","",null,null],[7,"COMMAND_QUERY_SHORT","","",null,null],[7,"COMMAND_QUERY_EXPLAIN_LONG","","",null,null],[7,"COMMAND_QUERY_EXPLAIN_SHORT","","",null,null],[7,"COMMAND_QUERY_PREPARED_LONG","","",null,null],[7,"COMMAND_SCHEMA","","",null,null],[7,"COMMAND_SYNC","","",null,null],[7,"COMMAND_TIMER_LONG","","",null,null],[7,"COMMAND_TRANSACT_LONG","","",null,null],[7,"COMMAND_TRANSACT_SHORT","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"command"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"command"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"command"}],"output":{"name":"bool"}}],[11,"is_complete","","is_complete returns true if no more input is required for the command to be successfully executed. false is returned if the command is not considered valid. Defaults to true for all commands except Query and Transact. TODO: for query and transact commands, they will be considered complete if a parsable EDN has been entered as an argument",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_timed","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"output","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[0,"input","mentat_cli","",null,null],[3,"InputReader","mentat_cli::input","Reads input from `stdin`",null,null],[4,"InputResult","","Possible results from reading input from `InputReader`",null,null],[13,"MetaCommand","","mentat command as input; (name, rest of line)",2,null],[13,"Empty","","An empty line",2,null],[13,"More","","Needs more input",2,null],[13,"Eof","","End of file reached",2,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"inputresult"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `InputReader` reading from `stdin`.",3,{"inputs":[{"generics":["interface"],"name":"option"}],"output":{"name":"inputreader"}}],[11,"is_tty","","Returns whether the `InputReader` is reading from a TTY.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"read_input","","Reads a single command, item, or statement from `stdin`. Returns `More` if further input is required for a complete result. In this case, the input received so far is buffered internally.",3,{"inputs":[{"name":"self"}],"output":{"generics":["inputresult","error"],"name":"result"}}],[11,"save_history","","",3,null],[0,"repl","mentat_cli","",null,null],[3,"Repl","mentat_cli::repl","Executes input and maintains state of persistent items.",null,null],[11,"db_name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Constructs a new `Repl`.",4,{"inputs":[{"name":"bool"}],"output":{"generics":["repl","string"],"name":"result"}}],[11,"run","","Runs the REPL interactively.",4,{"inputs":[{"name":"self"},{"generics":["vec"],"name":"option"}],"output":null}],[11,"explain_query","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"execute_transact","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"fmt","mentat_cli","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"bail","","",null,null]],"paths":[[4,"CliError"],[4,"Command"],[4,"InputResult"],[3,"InputReader"],[3,"Repl"]]};
searchIndex["mentat_core"] = {"doc":"","items":[[3,"Uuid","mentat_core","A Universally Unique Identifier (UUID).",null,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",0,null],[10,"minute","","Returns the minute number from 0 to 59.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"Cloned","","",null,null],[10,"cloned","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"to_value_rc","","",1,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[8,"FromMicros","","",null,null],[10,"from_micros","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[8,"FromRc","","",null,null],[10,"from_rc","","",3,{"inputs":[{"name":"rc"}],"output":{"name":"self"}}],[10,"from_arc","","",3,{"inputs":[{"name":"arc"}],"output":{"name":"self"}}],[3,"Keyword","","A keyword is a symbol, optionally with a namespace, that prints with a leading colon. This concept is imported from Clojure, as it features in EDN and the query syntax that we use.",null,null],[8,"ToMicros","","",null,null],[10,"to_micros","","",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[3,"Utc","","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[6,"ValueRc","","This type alias exists to allow us to use different boxing mechanisms for values. This type must implement `FromRc` and `Cloned`, and a `From` implementation must exist for `TypedValue`.",null,null],[5,"parse_query","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["parsedquery","parseerror"],"name":"result"}}],[3,"EdnParseError","","",null,null],[12,"line","","",5,null],[12,"column","","",5,null],[12,"offset","","",5,null],[12,"expected","","",5,null],[3,"KnownEntid","","An entid that's either already in the store, or newly allocated to a tempid. TODO: we'd like to link this in some way to the lifetime of a particular PartitionMap.",null,null],[12,"0","","",6,null],[3,"StructuredMap","","A pull expression expands a binding into a structure. The returned structure associates attributes named in the input or retrieved from the store with values. This association is a `StructuredMap`.",null,null],[12,"0","","",7,null],[3,"ValueTypeSet","","",null,null],[12,"0","","",8,null],[3,"Attribute","","A Mentat schema attribute has a value type and several other flags determining how assertions with the attribute are interpreted.",null,null],[12,"value_type","","The associated value type, i.e., `:db/valueType`?",9,null],[12,"multival","","`true` if this attribute is multi-valued, i.e., it is `:db/cardinality :db.cardinality/many`.  `false` if this attribute is single-valued (the default), i.e., it is `:db/cardinality :db.cardinality/one`.",9,null],[12,"unique","","`None` if this attribute is neither unique-value nor unique-identity.",9,null],[12,"index","","`true` if this attribute is automatically indexed, i.e., it is `:db/indexing true`.",9,null],[12,"fulltext","","`true` if this attribute is automatically fulltext indexed, i.e., it is `:db/fulltext true`.",9,null],[12,"component","","`true` if this attribute is a component, i.e., it is `:db/isComponent true`.",9,null],[12,"no_history","","`true` if this attribute doesn't require history to be kept, i.e., it is `:db/noHistory true`.",9,null],[3,"Schema","","Represents a Mentat schema.",null,null],[12,"entid_map","","Map entid->ident.",10,null],[12,"ident_map","","Map ident->entid.",10,null],[12,"attribute_map","","Map entid->attribute flags.",10,null],[12,"component_attributes","","Maintain a vec of unique attribute IDs for which the corresponding attribute in `attribute_map` has `.component == true`.",10,null],[4,"Binding","","The values bound in a query specification can be:",null,null],[13,"Scalar","","",11,null],[13,"Vec","","",11,null],[13,"Map","","",11,null],[4,"TypedValue","","Represents a value that can be stored in a Mentat store.",null,null],[13,"Ref","","",12,null],[13,"Boolean","","",12,null],[13,"Long","","",12,null],[13,"Double","","",12,null],[13,"Instant","","",12,null],[13,"String","","",12,null],[13,"Keyword","","",12,null],[13,"Uuid","","",12,null],[4,"ValueType","","The attribute of each Mentat assertion has a :db/valueType constraining the value to a particular set.  Mentat recognizes the following :db/valueType values.",null,null],[13,"Ref","","",13,null],[13,"Boolean","","",13,null],[13,"Instant","","",13,null],[13,"Long","","",13,null],[13,"Double","","",13,null],[13,"String","","",13,null],[13,"Keyword","","",13,null],[13,"Uuid","","",13,null],[4,"SQLTypeAffinity","","Type safe representation of the possible return values from SQLite's `typeof`",null,null],[13,"Null","","",14,null],[13,"Integer","","",14,null],[13,"Real","","",14,null],[13,"Text","","",14,null],[13,"Blob","","",14,null],[4,"AttributeBitFlags","","Bit flags used in `flags0` column in temporary tables created during search, such as the `search_results`, `inexact_searches` and `exact_searches` tables. When moving to a more concrete table, such as `datoms`, they are expanded out via these flags and put into their own column rather than a bit field.",null,null],[13,"IndexAVET","","",15,null],[13,"IndexVAET","","",15,null],[13,"IndexFulltext","","",15,null],[13,"UniqueValue","","",15,null],[5,"now","","Return the current time as a UTC `DateTime` instance with microsecond precision.",null,{"inputs":[],"output":{"generics":["utc"],"name":"datetime"}}],[0,"values","","",null,null],[3,"DB_ADD","mentat_core::values","",null,null],[3,"DB_ALTER_ATTRIBUTE","","",null,null],[3,"DB_CARDINALITY","","",null,null],[3,"DB_CARDINALITY_MANY","","",null,null],[3,"DB_CARDINALITY_ONE","","",null,null],[3,"DB_FULLTEXT","","",null,null],[3,"DB_IDENT","","",null,null],[3,"DB_INDEX","","",null,null],[3,"DB_INSTALL_ATTRIBUTE","","",null,null],[3,"DB_IS_COMPONENT","","",null,null],[3,"DB_NO_HISTORY","","",null,null],[3,"DB_PART_DB","","",null,null],[3,"DB_RETRACT","","",null,null],[3,"DB_TYPE_BOOLEAN","","",null,null],[3,"DB_TYPE_DOUBLE","","",null,null],[3,"DB_TYPE_INSTANT","","",null,null],[3,"DB_TYPE_KEYWORD","","",null,null],[3,"DB_TYPE_LONG","","",null,null],[3,"DB_TYPE_REF","","",null,null],[3,"DB_TYPE_STRING","","",null,null],[3,"DB_TYPE_URI","","",null,null],[3,"DB_TYPE_UUID","","",null,null],[3,"DB_UNIQUE","","",null,null],[3,"DB_UNIQUE_IDENTITY","","",null,null],[3,"DB_UNIQUE_VALUE","","",null,null],[3,"DB_VALUE_TYPE","","",null,null],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"initialize","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","mentat_core","",6,{"inputs":[{"name":"self"}],"output":{"name":"knownentid"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"from","","",12,{"inputs":[{"name":"knownentid"}],"output":{"name":"typedvalue"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"all_enums","","",13,{"inputs":[],"output":{"generics":["valuetype"],"name":"enumset"}}],[11,"to_u32","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_u32","","",13,{"inputs":[{"name":"u32"}],"output":{"name":"valuetype"}}],[11,"into_keyword","","",13,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"from_keyword","","",13,{"inputs":[{"name":"keyword"}],"output":{"name":"option"}}],[11,"into_typed_value","","",13,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"into_edn_value","","",13,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"is_numeric","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"from","","",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"structuredmap"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"generics":["binding"],"name":"vec"}],"output":{"name":"self"}}],[11,"val","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"structuredmap"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"structuredmap"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"structuredmap"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"structuredmap"}],"output":{"name":"bool"}}],[11,"insert","","",7,{"inputs":[{"name":"self"},{"name":"n"},{"name":"b"}],"output":null}],[11,"from","","",7,{"inputs":[{"generics":["valuerc","binding"],"name":"indexmap"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"is_congruent_with","","Returns true if the provided type is `Some` and matches this value's type, or if the provided type is `None`.",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"matches_type","","",11,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"value_type","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["valuetype"],"name":"option"}}],[11,"is_congruent_with","","Returns true if the provided type is `Some` and matches this value's type, or if the provided type is `None`.",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"matches_type","","",12,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"value_type","","",12,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"typed_ns_keyword","","Construct a new `TypedValue::Keyword` instance by cloning the provided values and wrapping them in a new `ValueRc`. This is expensive, so this might be best limited to tests.",12,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"typed_string","","Construct a new `TypedValue::String` instance by cloning the provided value and wrapping it in a new `ValueRc`. This is expensive, so this might be best limited to tests.",12,{"inputs":[{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"current_instant","","",12,{"inputs":[],"output":{"name":"typedvalue"}}],[11,"instant","","Construct a new `TypedValue::Instant` instance from the provided microsecond timestamp.",12,{"inputs":[{"name":"i64"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"name":"bool"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"generics":["utc"],"name":"datetime"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"name":"uuid"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"generics":["string"],"name":"arc"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"generics":["string"],"name":"rc"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"generics":["string"],"name":"box"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"name":"string"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"generics":["keyword"],"name":"arc"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"generics":["keyword"],"name":"rc"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"name":"keyword"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"name":"u32"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"name":"i32"}],"output":{"name":"typedvalue"}}],[11,"from","","",12,{"inputs":[{"name":"f64"}],"output":{"name":"typedvalue"}}],[11,"into_known_entid","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"into_entid","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["entid"],"name":"option"}}],[11,"into_kw","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["valuerc"],"name":"option"}}],[11,"into_boolean","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_long","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_double","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_instant","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"into_timestamp","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["valuerc"],"name":"option"}}],[11,"into_c_string","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_kw_c_string","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_uuid_c_string","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_uuid","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"into_uuid_string","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"into_known_entid","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"into_entid","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["entid"],"name":"option"}}],[11,"into_kw","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["valuerc"],"name":"option"}}],[11,"into_boolean","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_long","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_double","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_instant","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"into_timestamp","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["valuerc"],"name":"option"}}],[11,"into_uuid","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"into_uuid_string","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"into_c_string","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_kw_c_string","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_uuid_c_string","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"valuetypeset"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"valuetypeset"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"valuetypeset"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"valuetypeset"}}],[11,"any","","",8,{"inputs":[],"output":{"name":"valuetypeset"}}],[11,"none","","",8,{"inputs":[],"output":{"name":"valuetypeset"}}],[11,"of_one","","Return a set containing only `t`.",8,{"inputs":[{"name":"valuetype"}],"output":{"name":"valuetypeset"}}],[11,"of_numeric_types","","Return a set containing `Double` and `Long`.",8,{"inputs":[],"output":{"name":"valuetypeset"}}],[11,"of_numeric_and_instant_types","","Return a set containing `Double`, `Long`, and `Instant`.",8,{"inputs":[],"output":{"name":"valuetypeset"}}],[11,"of_keywords","","Return a set containing `Ref` and `Keyword`.",8,{"inputs":[],"output":{"name":"valuetypeset"}}],[11,"of_longs","","Return a set containing `Ref` and `Long`.",8,{"inputs":[],"output":{"name":"valuetypeset"}}],[11,"insert","","",8,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"len","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"union","","Returns a set containing all the types in this set and `other`.",8,{"inputs":[{"name":"self"},{"name":"valuetypeset"}],"output":{"name":"valuetypeset"}}],[11,"intersection","","",8,{"inputs":[{"name":"self"},{"name":"valuetypeset"}],"output":{"name":"valuetypeset"}}],[11,"difference","","Returns the set difference between `self` and `other`, which is the set of items in `self` that are not in `other`.",8,{"inputs":[{"name":"self"},{"name":"valuetypeset"}],"output":{"name":"valuetypeset"}}],[11,"exemplar","","Return an arbitrary type that's part of this set. For a set containing a single type, this will be that type.",8,{"inputs":[{"name":"self"}],"output":{"generics":["valuetype"],"name":"option"}}],[11,"is_subset","","",8,{"inputs":[{"name":"self"},{"name":"valuetypeset"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns true if `self` and `other` contain no items in common.",8,{"inputs":[{"name":"self"},{"name":"valuetypeset"}],"output":{"name":"bool"}}],[11,"contains","","",8,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"is_empty","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["valuetype"],"name":"iter"}}],[11,"from","","",8,{"inputs":[{"name":"valuetype"}],"output":{"name":"self"}}],[11,"is_only_numeric","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_iter","","",8,null],[11,"from_iter","","",8,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"sqltypeaffinity"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"sqltypeaffinity"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"sqltypeaffinity"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"sqltypeaffinity"}],"output":{"name":"bool"}}],[11,"sql_representation","","",13,null],[11,"value_type_tag","","",13,{"inputs":[{"name":"self"}],"output":{"name":"valuetypetag"}}],[11,"accommodates_integer","","Returns true if the provided integer is in the SQLite value space of this type. For example, `1` is how we encode `true`.",13,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"value_type_tags","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["valuetypetag"],"name":"btreeset"}}],[11,"unique_type_tag","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["valuetypetag"],"name":"option"}}],[11,"has_unique_type_tag","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"attribute","","",null,null],[4,"Unique","mentat_core::attribute","",null,null],[13,"Value","","",42,null],[13,"Identity","","",42,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"cmp","","",42,{"inputs":[{"name":"self"},{"name":"unique"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"self"},{"name":"unique"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"unique"}],"output":{"name":"bool"}}],[11,"into_typed_value","","",42,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[0,"intern_set","mentat_core","",null,null],[3,"InternSet","mentat_core::intern_set","An `InternSet` allows to \"intern\" some potentially large values, maintaining a single value instance owned by the `InternSet` and leaving consumers with lightweight ref-counted handles to the large owned value.  This can avoid expensive clone() operations.",null,null],[12,"inner","","",43,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"internset"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"internset"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"internset"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"internset"}],"output":{"name":"bool"}}],[11,"new","","",43,{"inputs":[],"output":{"name":"internset"}}],[11,"len","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"intern","","Intern a value, providing a ref-counted handle to the interned value.",43,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rc"}}],[0,"counter","mentat_core","",null,null],[3,"RcCounter","mentat_core::counter","",null,null],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"rccounter"}}],[11,"with_initial","","",44,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","","",44,{"inputs":[],"output":{"name":"self"}}],[11,"next","","Return the next value in the sequence.",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"util","mentat_core","",null,null],[4,"Either","mentat_core::util","",null,null],[13,"Left","","",45,null],[13,"Right","","",45,null],[8,"ResultEffect","","Side-effect chaining on `Result`.",null,null],[10,"when_ok","","Invoke `f` if `self` is `Ok`, returning `self`.",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"when_err","","Invoke `f` if `self` is `Err`, returning `self`.",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[8,"OptionEffect","","Side-effect chaining on `Option`.",null,null],[10,"when_none","","Invoke `f` if `self` is `None`, returning `self`.",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"when_some","","Invoke `f` if `self` is `Some`, returning `self`.",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"cmp","","",45,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"map_left","","",45,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","",45,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[6,"Entid","mentat_core","Represents one entid in the entid space.",null,null],[6,"ValueTypeTag","","",null,null],[6,"IdentMap","","Map `Keyword` idents (`:db/ident`) to positive integer entids (`1`).",null,null],[6,"EntidMap","","Map positive integer entids (`1`) to `Keyword` idents (`:db/ident`).",null,null],[6,"AttributeMap","","Map attribute entids to `Attribute` instances.",null,null],[8,"CachedAttributes","","",null,null],[10,"is_attribute_cached_reverse","","",48,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"bool"}}],[10,"is_attribute_cached_forward","","",48,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"bool"}}],[10,"has_cached_attributes","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_values_for_entid","","",48,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"entid"},{"name":"entid"}],"output":{"generics":["vec"],"name":"option"}}],[10,"get_value_for_entid","","",48,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"entid"},{"name":"entid"}],"output":{"generics":["typedvalue"],"name":"option"}}],[10,"get_entid_for_value","","Reverse lookup.",48,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"typedvalue"}],"output":{"generics":["entid"],"name":"option"}}],[10,"get_entids_for_value","","",48,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"typedvalue"}],"output":{"generics":["btreeset"],"name":"option"}}],[8,"UpdateableCache","","",null,null],[10,"update","","",49,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"i"},{"name":"i"}],"output":{"name":"result"}}],[8,"SQLValueType","","",null,null],[10,"value_type_tag","","",50,{"inputs":[{"name":"self"}],"output":{"name":"valuetypetag"}}],[10,"accommodates_integer","","",50,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[10,"sql_representation","","Return a pair of the ValueTypeTag for this value type, and the SQLTypeAffinity required to distinguish it from any other types that share the same tag.",50,null],[8,"SQLValueTypeSet","","We have an enum of types, `ValueType`. It can be collected into a set, `ValueTypeSet`. Each type is associated with a type tag, which is how a type is represented in, e.g., SQL storage. Types can share type tags, because backing SQL storage is able to differentiate between some types (e.g., longs and doubles), and so distinct tags aren't necessary. That association is defined by `SQLValueType`. That trait similarly extends to `ValueTypeSet`, which maps a collection of types into a collection of tags.",null,null],[10,"value_type_tags","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["valuetypetag"],"name":"btreeset"}}],[10,"has_unique_type_tag","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"unique_type_tag","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["valuetypetag"],"name":"option"}}],[8,"HasSchema","","",null,null],[10,"entid_for_type","","",52,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["knownentid"],"name":"option"}}],[10,"get_ident","","",52,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["keyword"],"name":"option"}}],[10,"get_entid","","",52,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["knownentid"],"name":"option"}}],[10,"attribute_for_entid","","",52,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["attribute"],"name":"option"}}],[10,"attribute_for_ident","","",52,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"option"}}],[10,"is_attribute","","Return true if the provided entid identifies an attribute in this schema.",52,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"identifies_attribute","","Return true if the provided ident identifies an attribute in this schema.",52,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[10,"component_attributes","","",52,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"flags","","Combine several attribute flags into a bitfield used in temporary search tables.",9,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"to_edn_value","","",9,{"inputs":[{"name":"self"},{"generics":["keyword"],"name":"option"}],"output":{"name":"value"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"attribute"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"schema"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"schema"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"new","","",10,{"inputs":[{"name":"identmap"},{"name":"entidmap"},{"name":"attributemap"}],"output":{"name":"schema"}}],[11,"to_edn_value","","Returns an symbolic representation of the schema suitable for applying across Mentat stores.",10,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"update_component_attributes","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"entid_for_type","","",10,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"get_ident","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"get_entid","","",10,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"attribute_for_entid","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"attribute_for_ident","","",10,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"option"}}],[11,"is_attribute","","Return true if the provided entid identifies an attribute in this schema.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"identifies_attribute","","Return true if the provided ident identifies an attribute in this schema.",10,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"component_attributes","","",10,null],[14,"interpose","","A helper macro to sequentially process an iterable sequence, evaluating a block between each pair of items.",null,null],[14,"interpose_iter","","A helper to bind `name` to values in `across`, running `body` for each value, and running `inter` between each value. See `interpose` for examples.",null,null],[11,"nil","","The 'nil UUID'.",53,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",53,{"inputs":[{"name":"uuidversion"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",53,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",53,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",53,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",53,{"inputs":[{"name":"self"}],"output":{"generics":["uuidvariant"],"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",53,{"inputs":[{"name":"self"}],"output":{"generics":["uuidversion"],"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",53,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",53,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",53,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",53,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and  counter portion of a V1 UUID.  If the supplied UUID is not V1, this  will return None",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",53,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"add","","",54,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"add","","",54,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"fix","","",55,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"from","","",54,{"inputs":[{"name":"systemtime"}],"output":{"generics":["utc"],"name":"datetime"}}],[11,"from","","",54,{"inputs":[{"name":"systemtime"}],"output":{"generics":["local"],"name":"datetime"}}],[11,"hour","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_minute","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_second","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_nanosecond","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"serialize","","Serialize into a rfc3339 time string",54,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"year","","",54,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",54,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",54,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",54,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month0","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day0","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal0","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"sub","","",54,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"sub","","",54,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"sub","","",54,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"from_str","","",54,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"from_str","","",54,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"from_str","","",54,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",54,null],[11,"deserialize","","",54,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"deserialize","","",54,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"deserialize","","",54,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_offset","","",55,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",55,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",55,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_utc_date","","",55,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",55,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",53,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"cmp","","",53,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"deserialize","","",53,{"inputs":[{"name":"d"}],"output":{"generics":["uuid"],"name":"result"}}],[11,"rand","","",53,{"inputs":[{"name":"r"}],"output":{"name":"uuid"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"serialize","","",53,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default","","Returns the nil UUID, which is all zeroes",53,{"inputs":[],"output":{"name":"uuid"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"to_micros","","",54,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"ordering"}}],[11,"deserialize","","",56,{"inputs":[{"name":"__d"}],"output":{"generics":["keyword"],"name":"result"}}],[11,"hash","","",56,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","Print the keyword in EDN format.",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_micros","","",54,{"inputs":[{"name":"i64"}],"output":{"generics":["utc"],"name":"datetime"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"serialize","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",54,null],[11,"date","","Retrieves a date component.",54,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",54,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",54,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",54,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",54,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",54,null],[11,"timezone","","Retrieves an associated time zone.",54,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",54,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",54,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",54,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",54,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",54,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",54,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",54,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",54,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",54,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",54,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",54,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",54,{"inputs":[{"name":"self"},{"name":"secondsformat"},{"name":"bool"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",54,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",54,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"plain","","",56,{"inputs":[{"name":"t"}],"output":{"name":"keyword"}}],[11,"namespaced","","Creates a new `Keyword`.",56,{"inputs":[{"name":"n"},{"name":"t"}],"output":{"name":"keyword"}}],[11,"name","","",56,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"namespace","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"components","","",56,null],[11,"is_backward","","Whether this `Keyword` should be interpreted in reverse order. For example, the two following snippets are identical:",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_forward","","Whether this `Keyword` should be interpreted in forward order. See `symbols::Keyword::is_backward`.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_namespaced","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_reversed","","Returns a `Keyword` with the same namespace and a 'backward' name. See `symbols::Keyword::is_backward`.",56,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"unreversed","","If this `Keyword` is 'backward' (see `symbols::Keyword::is_backward`), return `Some('forward name')`; otherwise, return `None`.",56,{"inputs":[{"name":"self"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",55,{"inputs":[],"output":{"generics":["utc"],"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",55,{"inputs":[],"output":{"generics":["utc"],"name":"datetime"}}],[11,"from","","",57,{"inputs":[{"name":"knownentid"}],"output":{"name":"entid"}}]],"paths":[[8,"Timelike"],[8,"Cloned"],[8,"FromMicros"],[8,"FromRc"],[8,"ToMicros"],[3,"EdnParseError"],[3,"KnownEntid"],[3,"StructuredMap"],[3,"ValueTypeSet"],[3,"Attribute"],[3,"Schema"],[4,"Binding"],[4,"TypedValue"],[4,"ValueType"],[4,"SQLTypeAffinity"],[4,"AttributeBitFlags"],[3,"DB_ADD"],[3,"DB_ALTER_ATTRIBUTE"],[3,"DB_CARDINALITY"],[3,"DB_CARDINALITY_MANY"],[3,"DB_CARDINALITY_ONE"],[3,"DB_FULLTEXT"],[3,"DB_IDENT"],[3,"DB_INDEX"],[3,"DB_INSTALL_ATTRIBUTE"],[3,"DB_IS_COMPONENT"],[3,"DB_NO_HISTORY"],[3,"DB_PART_DB"],[3,"DB_RETRACT"],[3,"DB_TYPE_BOOLEAN"],[3,"DB_TYPE_DOUBLE"],[3,"DB_TYPE_INSTANT"],[3,"DB_TYPE_KEYWORD"],[3,"DB_TYPE_LONG"],[3,"DB_TYPE_REF"],[3,"DB_TYPE_STRING"],[3,"DB_TYPE_URI"],[3,"DB_TYPE_UUID"],[3,"DB_UNIQUE"],[3,"DB_UNIQUE_IDENTITY"],[3,"DB_UNIQUE_VALUE"],[3,"DB_VALUE_TYPE"],[4,"Unique"],[3,"InternSet"],[3,"RcCounter"],[4,"Either"],[8,"ResultEffect"],[8,"OptionEffect"],[8,"CachedAttributes"],[8,"UpdateableCache"],[8,"SQLValueType"],[8,"SQLValueTypeSet"],[8,"HasSchema"],[3,"Uuid"],[3,"DateTime"],[3,"Utc"],[3,"Keyword"],[6,"Entid"]]};
searchIndex["mentat_db"] = {"doc":"","items":[[3,"AttributeBuilder","mentat_db","",null,null],[12,"value_type","","",0,null],[12,"multival","","",0,null],[12,"unique","","",0,null],[12,"index","","",0,null],[12,"fulltext","","",0,null],[12,"component","","",0,null],[12,"no_history","","",0,null],[5,"transact","","Transact the given `entities` against the given SQLite `conn`, using the given metadata. If you want this work to occur inside a SQLite transaction, establish one on the connection prior to calling this function.",null,{"inputs":[{"name":"connection"},{"name":"partitionmap"},{"name":"schema"},{"name":"schema"},{"name":"w"},{"name":"i"}],"output":{"name":"result"}}],[5,"transact_terms","","Just like `transact`, but accepts lower-level inputs to allow bypassing the parser interface.",null,{"inputs":[{"name":"connection"},{"name":"partitionmap"},{"name":"schema"},{"name":"schema"},{"name":"w"},{"name":"i"},{"generics":["tempid"],"name":"internset"}],"output":{"name":"result"}}],[5,"to_namespaced_keyword","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["keyword"],"name":"result"}}],[5,"repeat_values","","Prepare an SQL `VALUES` block, like (?, ?, ?), (?, ?, ?).",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[0,"errors","","",null,null],[3,"DbError","mentat_db::errors","",null,null],[4,"CardinalityConflict","","",null,null],[13,"CardinalityOneAddConflict","","A cardinality one attribute has multiple assertions `[e a v1], [e a v2], ...`.",1,null],[12,"e","mentat_db::errors::CardinalityConflict","",1,null],[12,"a","","",1,null],[12,"vs","","",1,null],[13,"AddRetractConflict","mentat_db::errors","A datom has been both asserted and retracted, like `[:db/add e a v]` and `[:db/retract e a v]`.",1,null],[12,"e","mentat_db::errors::CardinalityConflict","",1,null],[12,"a","","",1,null],[12,"vs","","",1,null],[4,"SchemaConstraintViolation","mentat_db::errors","",null,null],[13,"ConflictingUpserts","","A transaction tried to assert datoms where one tempid upserts to two (or more) distinct entids.",2,null],[12,"conflicting_upserts","mentat_db::errors::SchemaConstraintViolation","A map from tempid to the entids it would upsert to.",2,null],[13,"TypeDisagreements","mentat_db::errors","A transaction tried to assert a datom or datoms with the wrong value `v` type(s).",2,null],[12,"conflicting_datoms","mentat_db::errors::SchemaConstraintViolation","The key (`[e a v]`) has an invalid value `v`: it is not of the expected value type.",2,null],[13,"CardinalityConflicts","mentat_db::errors","A transaction tried to assert datoms that don't observe the schema's cardinality constraints.",2,null],[12,"conflicts","mentat_db::errors::SchemaConstraintViolation","",2,null],[4,"InputError","mentat_db::errors","",null,null],[13,"BadDbId","","Map notation included a bad `:db/id` value.",3,null],[13,"BadEntityPlace","","A value place cannot be interpreted as an entity place (for example, in nested map notation).",3,null],[4,"DbErrorKind","","",null,null],[13,"NotYetImplemented","","We're just not done yet.  Message that the feature is recognized but not yet implemented.",4,null],[13,"BadValuePair","","We've been given a value that isn't the correct Mentat type.",4,null],[13,"BadSQLValuePair","","We've got corrupt data in the SQL store: a value and value_type_tag don't line up. TODO _1.data_type()",4,null],[13,"BadBootstrapDefinition","","A bootstrap definition couldn't be parsed or installed.  This is a programmer error, not a runtime error.",4,null],[13,"BadSchemaAssertion","","A schema assertion couldn't be parsed.",4,null],[13,"UnrecognizedIdent","","An ident->entid mapping failed.",4,null],[13,"UnrecognizedEntid","","An entid->ident mapping failed. We also use this error if you try to transact an entid that we didn't allocate, in part because we blow the stack in error_chain if we define a new enum!",4,null],[13,"UnknownAttribute","","",4,null],[13,"CannotCacheNonUniqueAttributeInReverse","","",4,null],[13,"SchemaAlterationFailed","","",4,null],[13,"SchemaConstraintViolation","","A transaction tried to violate a constraint of the schema of the Mentat store.",4,null],[13,"InputError","","The transaction was malformed in some way (that was not recognized at parse time; for example, in a way that is schema-dependent).",4,null],[13,"WrongTypeValueForFtsAssertion","","",4,null],[13,"CacheUpdateFailed","","",4,null],[13,"CouldNotSetVersionPragma","","",4,null],[13,"CouldNotGetVersionPragma","","",4,null],[13,"CouldNotSearch","","",4,null],[13,"TxInsertFailedToAddMissingDatoms","","",4,null],[13,"TxInsertFailedToRetractDatoms","","",4,null],[13,"DatomsUpdateFailedToRetract","","",4,null],[13,"DatomsUpdateFailedToAdd","","",4,null],[13,"FailedToCreateTempTables","","",4,null],[13,"NonFtsInsertionIntoTempSearchTableFailed","","",4,null],[13,"FtsInsertionFailed","","",4,null],[13,"FtsInsertionIntoTempSearchTableFailed","","",4,null],[13,"FtsFailedToDropSearchIds","","",4,null],[13,"FailedToUpdatePartitionMap","","",4,null],[13,"RusqliteError","","",4,null],[6,"Result","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"cardinalityconflict"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"cardinalityconflict"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"cardinalityconflict"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"schemaconstraintviolation"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"schemaconstraintviolation"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"schemaconstraintviolation"}],"output":{"name":"bool"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"inputerror"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"inputerror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"kind","","",5,{"inputs":[{"name":"self"}],"output":{"name":"dberrorkind"}}],[11,"from","","",5,{"inputs":[{"name":"dberrorkind"}],"output":{"name":"dberror"}}],[11,"from","","",5,{"inputs":[{"generics":["dberrorkind"],"name":"context"}],"output":{"name":"dberror"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"dberror"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"dberrorkind"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"dberrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"dberrorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"cache","mentat_db","",null,null],[3,"AevFactory","mentat_db::cache","",null,null],[3,"AevRows","","",null,null],[3,"AttributeCaches","","",null,null],[3,"SQLiteAttributeCache","","",null,null],[3,"InProgressSQLiteAttributeCache","","We maintain a diff on top of the `inner` -- existing -- cache. That involves tracking unregisterings and registerings.",null,null],[12,"overlay","","",6,null],[3,"InProgressCacheTransactWatcher","","",null,null],[4,"AttributeSpec","","",null,null],[13,"All","","",7,null],[13,"Specified","","",7,null],[12,"fts","mentat_db::cache::AttributeSpec","",7,null],[12,"non_fts","","",7,null],[6,"CacheMap","mentat_db::cache","",null,null],[6,"Aev","","",null,null],[8,"AttributeCache","","",null,null],[10,"has_e","","",8,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"bool"}}],[10,"binding_for_e","","",8,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"generics":["binding"],"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["aev"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"attributecaches"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"attributecaches"}}],[11,"unregister_attribute","","",10,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"attributespec"}}],[11,"all","","",7,{"inputs":[],"output":{"name":"attributespec"}}],[11,"specified","","",7,{"inputs":[{"name":"btreeset"},{"name":"schema"}],"output":{"name":"attributespec"}}],[11,"forward_attribute_cache_for_attribute","","Return a reference to the cache for the provided `a`, if `a` names an attribute that is cached in the forward direction. If `a` doesn't name an attribute, or it's not cached at all, or it's only cached in reverse (`v` to `e`, not `e` to `v`), `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"entid"}],"output":{"generics":["attributecache"],"name":"option"}}],[11,"extend_cache_for_entities_and_attributes","","Fetch the requested entities and attributes from the store and put them in the cache. The caller is responsible for ensuring that `entities` is unique. Attributes for which every entity is already cached will not be processed again.",10,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"connection"},{"name":"attributespec"},{"name":"vec"}],"output":{"name":"result"}}],[11,"make_cache_for_entities_and_attributes","","Fetch the requested entities and attributes and put them in a new cache. The caller is responsible for ensuring that `entities` is unique.",10,{"inputs":[{"name":"schema"},{"name":"connection"},{"name":"attributespec"},{"name":"vec"}],"output":{"generics":["attributecaches"],"name":"result"}}],[11,"get_values_for_entid","","",10,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"entid"},{"name":"entid"}],"output":{"generics":["vec"],"name":"option"}}],[11,"get_value_for_entid","","",10,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"entid"},{"name":"entid"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"has_cached_attributes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_attribute_cached_reverse","","",10,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"bool"}}],[11,"is_attribute_cached_forward","","",10,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"bool"}}],[11,"get_entid_for_value","","",10,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"typedvalue"}],"output":{"generics":["entid"],"name":"option"}}],[11,"get_entids_for_value","","",10,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"typedvalue"}],"output":{"generics":["btreeset"],"name":"option"}}],[11,"update","","",10,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"i"},{"name":"i"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"sqliteattributecache"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"sqliteattributecache"}}],[11,"register_forward","","",11,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"connection"},{"name":"u"}],"output":{"name":"result"}}],[11,"register_reverse","","",11,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"connection"},{"name":"u"}],"output":{"name":"result"}}],[11,"register","","",11,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"connection"},{"name":"u"}],"output":{"name":"result"}}],[11,"unregister","","",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[11,"unregister_all","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","",11,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"i"},{"name":"i"}],"output":{"name":"result"}}],[11,"get_values_for_entid","","",11,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"entid"},{"name":"entid"}],"output":{"generics":["vec"],"name":"option"}}],[11,"get_value_for_entid","","",11,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"entid"},{"name":"entid"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"is_attribute_cached_reverse","","",11,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"bool"}}],[11,"is_attribute_cached_forward","","",11,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"bool"}}],[11,"has_cached_attributes","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_entids_for_value","","",11,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"typedvalue"}],"output":{"generics":["btreeset"],"name":"option"}}],[11,"get_entid_for_value","","",11,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"typedvalue"}],"output":{"generics":["entid"],"name":"option"}}],[11,"values_pairs","","Intended for use from tests.",11,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"u"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"value_pairs","","Intended for use from tests.",11,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"u"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"inprogresssqliteattributecache"}}],[11,"from_cache","","",6,{"inputs":[{"name":"sqliteattributecache"}],"output":{"name":"inprogresssqliteattributecache"}}],[11,"register_forward","","",6,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"connection"},{"name":"u"}],"output":{"name":"result"}}],[11,"register_reverse","","",6,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"connection"},{"name":"u"}],"output":{"name":"result"}}],[11,"register","","",6,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"connection"},{"name":"u"}],"output":{"name":"result"}}],[11,"unregister","","",6,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[11,"unregister_all","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","",6,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"i"},{"name":"i"}],"output":{"name":"result"}}],[11,"get_values_for_entid","","",6,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"entid"},{"name":"entid"}],"output":{"generics":["vec"],"name":"option"}}],[11,"get_value_for_entid","","",6,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"entid"},{"name":"entid"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"is_attribute_cached_reverse","","",6,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"bool"}}],[11,"is_attribute_cached_forward","","",6,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"bool"}}],[11,"has_cached_attributes","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_entids_for_value","","",6,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"typedvalue"}],"output":{"generics":["btreeset"],"name":"option"}}],[11,"get_entid_for_value","","",6,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"typedvalue"}],"output":{"generics":["entid"],"name":"option"}}],[11,"values_pairs","","Intended for use from tests.",6,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"u"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"value_pairs","","Intended for use from tests.",6,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"u"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"commit_to","","",6,{"inputs":[{"name":"self"},{"name":"sqliteattributecache"}],"output":null}],[11,"datom","","",12,{"inputs":[{"name":"self"},{"name":"optype"},{"name":"entid"},{"name":"entid"},{"name":"typedvalue"}],"output":null}],[11,"done","","",12,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"schema"}],"output":{"name":"result"}}],[11,"transact_watcher","","",6,{"inputs":[{"name":"self"}],"output":{"name":"inprogresscachetransactwatcher"}}],[0,"db","mentat_db","",null,null],[4,"SearchType","mentat_db::db","",null,null],[13,"Exact","","",13,null],[13,"Inexact","","",13,null],[5,"new_connection","","",null,{"inputs":[{"name":"t"}],"output":{"generics":["connection"],"name":"result"}}],[5,"create_empty_current_version","","Do just enough work that either `create_current_version` or sync can populate the DB.",null,{"inputs":[{"name":"connection"}],"output":{"name":"result"}}],[5,"create_current_version","","",null,{"inputs":[{"name":"connection"}],"output":{"generics":["db"],"name":"result"}}],[5,"ensure_current_version","","",null,{"inputs":[{"name":"connection"}],"output":{"generics":["db"],"name":"result"}}],[5,"read_db","","Read the materialized views from the given SQL store and return a Mentat `DB` for querying and applying transactions.",null,{"inputs":[{"name":"connection"}],"output":{"generics":["db"],"name":"result"}}],[5,"update_partition_map","","Update the current partition map materialized view.",null,{"inputs":[{"name":"connection"},{"name":"partitionmap"}],"output":{"name":"result"}}],[5,"update_metadata","","Update the metadata materialized views based on the given metadata report.",null,{"inputs":[{"name":"connection"},{"name":"schema"},{"name":"schema"},{"name":"metadatareport"}],"output":{"name":"result"}}],[6,"ReducedEntity","","Internal representation of an [e a v added] datom, ready to be transacted against the store.",null,null],[17,"CURRENT_VERSION","","Version history:",null,null],[8,"TypedSQLValue","","",null,null],[10,"from_sql_value_pair","","",14,{"inputs":[{"name":"value"},{"name":"i32"}],"output":{"generics":["typedvalue"],"name":"result"}}],[10,"to_sql_value_pair","","",14,null],[10,"from_edn_value","","",14,{"inputs":[{"name":"value"}],"output":{"generics":["typedvalue"],"name":"option"}}],[10,"to_edn_value_pair","","",14,null],[8,"MentatStoring","","`MentatStoring` will be the trait that encapsulates the storage layer.  It is consumed by the transaction processing layer.",null,null],[10,"resolve_avs","","Given a slice of [a v] lookup-refs, look up the corresponding [e a v] triples.",15,null],[10,"begin_tx_application","","Begin (or prepare) the underlying storage layer for a new Mentat transaction.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"insert_non_fts_searches","","",15,null],[10,"insert_fts_searches","","",15,null],[10,"commit_transaction","","Finalize the underlying storage layer after a Mentat transaction.",15,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"result"}}],[10,"committed_metadata_assertions","","Extract metadata-related [e a typed_value added] datoms committed in the given transaction.",15,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"generics":["vec"],"name":"result"}}],[8,"PartitionMapping","","",null,null],[10,"allocate_entid","","",16,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"i64"}}],[10,"allocate_entids","","",16,{"inputs":[{"name":"self"},{"name":"s"},{"name":"usize"}],"output":{"generics":["i64"],"name":"range"}}],[10,"contains_entid","","",16,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"searchtype"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"searchtype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"searchtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"searchtype"}],"output":{"name":"bool"}}],[0,"debug","mentat_db","",null,null],[0,"entids","","",null,null],[3,"IDENTS_SQL_LIST","mentat_db::entids","Attributes that are \"ident related\".  These might change the \"idents\" materialized view.",null,null],[3,"SCHEMA_SQL_LIST","","Attributes that are \"schema related\".  These might change the \"schema\" materialized view.",null,null],[3,"METADATA_SQL_LIST","","Attributes that are \"metadata\" related.  These might change one of the materialized views.",null,null],[5,"might_update_metadata","","Return `false` if the given attribute will not change the metadata: recognized idents, schema, partitions in the partition map.",null,{"inputs":[{"name":"entid"}],"output":{"name":"bool"}}],[17,"DB_IDENT","","",null,null],[17,"DB_PART_DB","","",null,null],[17,"DB_TX_INSTANT","","",null,null],[17,"DB_INSTALL_PARTITION","","",null,null],[17,"DB_INSTALL_VALUE_TYPE","","",null,null],[17,"DB_INSTALL_ATTRIBUTE","","",null,null],[17,"DB_VALUE_TYPE","","",null,null],[17,"DB_CARDINALITY","","",null,null],[17,"DB_UNIQUE","","",null,null],[17,"DB_IS_COMPONENT","","",null,null],[17,"DB_INDEX","","",null,null],[17,"DB_FULLTEXT","","",null,null],[17,"DB_NO_HISTORY","","",null,null],[17,"DB_ADD","","",null,null],[17,"DB_RETRACT","","",null,null],[17,"DB_PART_USER","","",null,null],[17,"DB_PART_TX","","",null,null],[17,"DB_EXCISE","","",null,null],[17,"DB_EXCISE_ATTRS","","",null,null],[17,"DB_EXCISE_BEFORE_T","","",null,null],[17,"DB_EXCISE_BEFORE","","",null,null],[17,"DB_ALTER_ATTRIBUTE","","",null,null],[17,"DB_TYPE_REF","","",null,null],[17,"DB_TYPE_KEYWORD","","",null,null],[17,"DB_TYPE_LONG","","",null,null],[17,"DB_TYPE_DOUBLE","","",null,null],[17,"DB_TYPE_STRING","","",null,null],[17,"DB_TYPE_UUID","","",null,null],[17,"DB_TYPE_URI","","",null,null],[17,"DB_TYPE_BOOLEAN","","",null,null],[17,"DB_TYPE_INSTANT","","",null,null],[17,"DB_TYPE_BYTES","","",null,null],[17,"DB_CARDINALITY_ONE","","",null,null],[17,"DB_CARDINALITY_MANY","","",null,null],[17,"DB_UNIQUE_VALUE","","",null,null],[17,"DB_UNIQUE_IDENTITY","","",null,null],[17,"DB_DOC","","",null,null],[17,"DB_SCHEMA_VERSION","","",null,null],[17,"DB_SCHEMA_ATTRIBUTE","","",null,null],[17,"DB_SCHEMA_CORE","","",null,null],[11,"deref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"initialize","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"initialize","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"initialize","","",19,{"inputs":[{"name":"self"}],"output":null}],[0,"internal_types","mentat_db","Types used only within the transactor.  These should not be exposed outside of this crate.",null,null],[4,"Term","mentat_db::internal_types","",null,null],[13,"AddOrRetract","","",20,null],[4,"LookupRefOrTempId","","Internal representation of an entid on its way to resolution.  We either have the simple case (a numeric entid), a lookup-ref that still needs to be resolved (an atomized [a v] pair), or a temp ID that needs to be upserted or allocated (an atomized tempid).",null,null],[13,"LookupRef","","",21,null],[13,"TempId","","",21,null],[5,"replace_lookup_ref","","Given a `KnownEntidOr` or a `TypedValueOr`, replace any internal `LookupRef` with the entid from the given map.  Fail if any `LookupRef` cannot be replaced.",null,{"inputs":[{"name":"avmap"},{"generics":["lookuprefortempid"],"name":"either"},{"name":"u"}],"output":{"generics":["either"],"name":"result"}}],[6,"KnownEntidOr","","",null,null],[6,"TypedValueOr","","",null,null],[6,"TempIdHandle","","",null,null],[6,"TempIdMap","","",null,null],[6,"LookupRef","","",null,null],[6,"TermWithTempIdsAndLookupRefs","","",null,null],[6,"TermWithTempIds","","",null,null],[6,"TermWithoutTempIds","","",null,null],[6,"Population","","",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"term"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"term"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"self"},{"name":"term"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"self"},{"name":"term"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"self"},{"name":"term"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"self"},{"name":"term"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"term"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"term"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"lookuprefortempid"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"lookuprefortempid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"lookuprefortempid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"self"},{"name":"lookuprefortempid"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"self"},{"name":"lookuprefortempid"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"self"},{"name":"lookuprefortempid"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"self"},{"name":"lookuprefortempid"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"lookuprefortempid"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"lookuprefortempid"}],"output":{"name":"bool"}}],[11,"clone","mentat_db","",0,{"inputs":[{"name":"self"}],"output":{"name":"attributebuilder"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"attributebuilder"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attributebuilder"}],"output":{"name":"bool"}}],[11,"helpful","","Make a new AttributeBuilder for human consumption: it will help you by flipping relevant flags.",0,{"inputs":[],"output":{"name":"self"}}],[11,"to_modify_attribute","","Make a new AttributeBuilder from an existing Attribute. This is important to allow retraction. Only attributes that we allow to change are duplicated here.",0,{"inputs":[{"name":"attribute"}],"output":{"name":"self"}}],[11,"value_type","","",0,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"self"}}],[11,"multival","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"non_unique","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"unique","","",0,{"inputs":[{"name":"self"},{"name":"unique"}],"output":{"name":"self"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"fulltext","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"component","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"no_history","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"validate_install_attribute","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"validate_alter_attribute","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"build","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"mutate","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"generics":["attributealteration"],"name":"vec"}}],[0,"tx_observer","","",null,null],[3,"TxObserver","mentat_db::tx_observer","",null,null],[3,"TxCommand","","",null,null],[3,"TxObservationService","","",null,null],[3,"InProgressObserverTransactWatcher","","",null,null],[12,"txes","","",22,null],[8,"Command","","",null,null],[10,"execute","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",24,{"inputs":[{"name":"attributeset"},{"name":"f"}],"output":{"name":"txobserver"}}],[11,"applicable_reports","","",24,{"inputs":[{"name":"self"},{"name":"indexmap"}],"output":{"generics":["entid","attributeset"],"name":"indexmap"}}],[11,"execute","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"is_registered","","",26,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"register","","",26,{"inputs":[{"name":"self"},{"name":"string"},{"generics":["txobserver"],"name":"arc"}],"output":null}],[11,"deregister","","",26,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"has_observers","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"in_progress_did_commit","","",26,{"inputs":[{"name":"self"},{"generics":["entid","attributeset"],"name":"indexmap"}],"output":null}],[11,"drop","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",22,{"inputs":[],"output":{"name":"inprogressobservertransactwatcher"}}],[11,"datom","","",22,{"inputs":[{"name":"self"},{"name":"optype"},{"name":"entid"},{"name":"entid"},{"name":"typedvalue"}],"output":null}],[11,"done","","",22,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"schema"}],"output":{"name":"result"}}],[0,"types","mentat_db","",null,null],[3,"Attribute","mentat_db::types","A Mentat schema attribute has a value type and several other flags determining how assertions with the attribute are interpreted.",null,null],[12,"value_type","","The associated value type, i.e., `:db/valueType`?",27,null],[12,"multival","","`true` if this attribute is multi-valued, i.e., it is `:db/cardinality :db.cardinality/many`.  `false` if this attribute is single-valued (the default), i.e., it is `:db/cardinality :db.cardinality/one`.",27,null],[12,"unique","","`None` if this attribute is neither unique-value nor unique-identity.",27,null],[12,"index","","`true` if this attribute is automatically indexed, i.e., it is `:db/indexing true`.",27,null],[12,"fulltext","","`true` if this attribute is automatically fulltext indexed, i.e., it is `:db/fulltext true`.",27,null],[12,"component","","`true` if this attribute is a component, i.e., it is `:db/isComponent true`.",27,null],[12,"no_history","","`true` if this attribute doesn't require history to be kept, i.e., it is `:db/noHistory true`.",27,null],[4,"AttributeBitFlags","","Bit flags used in `flags0` column in temporary tables created during search, such as the `search_results`, `inexact_searches` and `exact_searches` tables. When moving to a more concrete table, such as `datoms`, they are expanded out via these flags and put into their own column rather than a bit field.",null,null],[13,"IndexAVET","","",28,null],[13,"IndexVAET","","",28,null],[13,"IndexFulltext","","",28,null],[13,"UniqueValue","","",28,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[6,"Entid","","Represents one entid in the entid space.",null,null],[3,"Schema","","Represents a Mentat schema.",null,null],[12,"entid_map","","Map entid->ident.",29,null],[12,"ident_map","","Map ident->entid.",29,null],[12,"attribute_map","","Map entid->attribute flags.",29,null],[12,"component_attributes","","Maintain a vec of unique attribute IDs for which the corresponding attribute in `attribute_map` has `.component == true`.",29,null],[4,"TypedValue","","Represents a value that can be stored in a Mentat store.",null,null],[13,"Ref","","",30,null],[13,"Boolean","","",30,null],[13,"Long","","",30,null],[13,"Double","","",30,null],[13,"Instant","","",30,null],[13,"String","","",30,null],[13,"Keyword","","",30,null],[13,"Uuid","","",30,null],[3,"Utc","","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[4,"ValueType","","The attribute of each Mentat assertion has a :db/valueType constraining the value to a particular set.  Mentat recognizes the following :db/valueType values.",null,null],[13,"Ref","","",31,null],[13,"Boolean","","",31,null],[13,"Instant","","",31,null],[13,"Long","","",31,null],[13,"Double","","",31,null],[13,"String","","",31,null],[13,"Keyword","","",31,null],[13,"Uuid","","",31,null],[3,"Partition","","Represents one partition of the entid space.",null,null],[12,"start","","The first entid in the partition.",32,null],[12,"index","","The next entid to be allocated in the partition.",32,null],[3,"DB","","Represents the metadata required to query from, or apply transactions to, a Mentat store.",null,null],[12,"partition_map","","Map partition name->`Partition`.",33,null],[12,"schema","","The schema of the store.",33,null],[3,"TxReport","","A transaction report summarizes an applied transaction.",null,null],[12,"tx_id","","The transaction ID of the transaction.",34,null],[12,"tx_instant","","The timestamp when the transaction began to be committed.",34,null],[12,"tempids","","A map from string literal tempid to resolved or allocated entid.",34,null],[6,"PartitionMap","","Map partition names to `Partition` instances.",null,null],[6,"AVPair","","A pair [a v] in the store.",null,null],[6,"AVMap","","Map [a v] pairs to existing entids.",null,null],[6,"AttributeSet","","",null,null],[8,"TransactableValue","","The transactor is tied to `edn::ValueAndSpan` right now, but in the future we'd like to support `TypedValue` directly for programmatic use.  `TransactableValue` encapsulates the interface value types (i.e., values in the value place) need to support to be transacted.",null,null],[10,"into_typed_value","","Coerce this value place into the given type.  This is where we perform schema-aware coercion, for example coercing an integral value into a ref where appropriate.",35,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"valuetype"}],"output":{"generics":["typedvalue"],"name":"result"}}],[10,"into_entity_place","","Make an entity place out of this value place.  This is where we limit values in nested maps to valid entity places.",35,{"inputs":[{"name":"self"}],"output":{"generics":["entityplace"],"name":"result"}}],[10,"as_tempid","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["tempid"],"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"partition"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"cmp","","",32,{"inputs":[{"name":"self"},{"name":"partition"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"partition"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"self"},{"name":"partition"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"self"},{"name":"partition"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"self"},{"name":"partition"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"self"},{"name":"partition"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"partition"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"partition"}],"output":{"name":"bool"}}],[11,"new","","",32,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"partition"}}],[11,"contains_entid","","",32,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"db"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"db"}}],[11,"hash","","",33,null],[11,"cmp","","",33,{"inputs":[{"name":"self"},{"name":"db"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"db"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"self"},{"name":"db"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"self"},{"name":"db"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"self"},{"name":"db"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"self"},{"name":"db"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"db"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"db"}],"output":{"name":"bool"}}],[11,"new","","",33,{"inputs":[{"name":"partitionmap"},{"name":"schema"}],"output":{"name":"db"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"txreport"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[17,"TX0","mentat_db","The first transaction ID applied to the knowledge base.",null,null],[17,"USER0","","This is the start of the :db.part/user partition.",null,null],[17,"CORE_SCHEMA_VERSION","","",null,null],[8,"AttributeValidation","","",null,null],[10,"validate","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"TransactWatcher","","",null,null],[10,"datom","","",37,{"inputs":[{"name":"self"},{"name":"optype"},{"name":"entid"},{"name":"entid"},{"name":"typedvalue"}],"output":null}],[10,"done","","Only return an error if you want to interrupt the transact! Called with the schema prior to the transact -- any attributes or attribute changes transacted during this transact are not reflected in the schema.",37,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"schema"}],"output":{"name":"result"}}],[14,"bail","","",null,null],[11,"to_micros","mentat_db::types","",38,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from_micros","","",38,{"inputs":[{"name":"i64"}],"output":{"generics":["utc"],"name":"datetime"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"add","","",38,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"add","","",38,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"fix","","",39,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"from","","",38,{"inputs":[{"name":"systemtime"}],"output":{"generics":["utc"],"name":"datetime"}}],[11,"from","","",38,{"inputs":[{"name":"systemtime"}],"output":{"generics":["local"],"name":"datetime"}}],[11,"hour","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_minute","","",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_second","","",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_nanosecond","","",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"serialize","","Serialize into a rfc3339 time string",38,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"year","","",38,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",38,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",38,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",38,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month","","",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month0","","",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day","","",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day0","","",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal","","",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal0","","",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"sub","","",38,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"sub","","",38,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"sub","","",38,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"from_str","","",38,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"from_str","","",38,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"from_str","","",38,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",38,null],[11,"deserialize","","",38,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"deserialize","","",38,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"deserialize","","",38,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_offset","","",39,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",39,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",39,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_utc_date","","",39,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",39,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"attribute"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"schema"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"schema"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"name":"bool"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"name":"uuid"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"generics":["string"],"name":"box"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"name":"u32"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"generics":["keyword"],"name":"rc"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"generics":["string"],"name":"arc"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"name":"knownentid"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"name":"f64"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"name":"keyword"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"generics":["utc"],"name":"datetime"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"name":"i32"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"name":"string"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"generics":["keyword"],"name":"arc"}],"output":{"name":"typedvalue"}}],[11,"from","","",30,{"inputs":[{"generics":["string"],"name":"rc"}],"output":{"name":"typedvalue"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"ordering"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"ordering"}}],[11,"cmp","","",29,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"ordering"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"ordering"}}],[11,"deserialize","","",30,{"inputs":[{"name":"__d"}],"output":{"generics":["typedvalue"],"name":"result"}}],[11,"hash","","",27,null],[11,"hash","","",30,null],[11,"hash","","",31,null],[11,"hash","","",29,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"sql_representation","","",31,null],[11,"value_type_tag","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"accommodates_integer","","Returns true if the provided integer is in the SQLite value space of this type. For example, `1` is how we encode `true`.",31,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"entid_for_type","","",29,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"get_ident","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"get_entid","","",29,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"attribute_for_entid","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"attribute_for_ident","","",29,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"option"}}],[11,"is_attribute","","Return true if the provided entid identifies an attribute in this schema.",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"identifies_attribute","","Return true if the provided ident identifies an attribute in this schema.",29,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"component_attributes","","",29,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_u32","","",31,{"inputs":[{"name":"u32"}],"output":{"name":"valuetype"}}],[11,"serialize","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_sql_value_pair","","Given a SQLite `value` and a `value_type_tag`, return the corresponding `TypedValue`.",30,{"inputs":[{"name":"value"},{"name":"i32"}],"output":{"generics":["typedvalue"],"name":"result"}}],[11,"from_edn_value","","Given an EDN `value`, return a corresponding Mentat `TypedValue`.",30,{"inputs":[{"name":"value"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"to_sql_value_pair","","Return the corresponding SQLite `value` and `value_type_tag` pair.",30,null],[11,"to_edn_value_pair","","Return the corresponding EDN `value` and `value_type` pair.",30,null],[11,"allocate_entid","","Allocate a single fresh entid in the given `partition`.",40,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"i64"}}],[11,"allocate_entids","","Allocate `n` fresh entids in the given `partition`.",40,{"inputs":[{"name":"self"},{"name":"s"},{"name":"usize"}],"output":{"generics":["i64"],"name":"range"}}],[11,"contains_entid","","",40,{"inputs":[{"name":"self"},{"name":"entid"}],"output":{"name":"bool"}}],[11,"into_typed_value","","",30,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"valuetype"}],"output":{"generics":["typedvalue"],"name":"result"}}],[11,"into_entity_place","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["entityplace"],"name":"result"}}],[11,"as_tempid","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["tempid"],"name":"option"}}],[11,"validate","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"flags","","Combine several attribute flags into a bitfield used in temporary search tables.",27,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"to_edn_value","","",27,{"inputs":[{"name":"self"},{"generics":["keyword"],"name":"option"}],"output":{"name":"value"}}],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",38,null],[11,"date","","Retrieves a date component.",38,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",38,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",38,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",38,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",38,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",38,null],[11,"timezone","","Retrieves an associated time zone.",38,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",38,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",38,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",38,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",38,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",38,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",38,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",38,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",38,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",38,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["datetime","parseerror"],"name":"result"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",38,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",38,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",38,{"inputs":[{"name":"self"},{"name":"secondsformat"},{"name":"bool"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",38,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",38,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"new","","",29,{"inputs":[{"generics":["keyword","i64"],"name":"btreemap"},{"generics":["i64","keyword"],"name":"btreemap"},{"generics":["i64","attribute"],"name":"btreemap"}],"output":{"name":"schema"}}],[11,"to_edn_value","","Returns an symbolic representation of the schema suitable for applying across Mentat stores.",29,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"update_component_attributes","","",29,null],[11,"is_congruent_with","","Returns true if the provided type is `Some` and matches this value's type, or if the provided type is `None`.",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"matches_type","","",30,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"value_type","","",30,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"typed_ns_keyword","","Construct a new `TypedValue::Keyword` instance by cloning the provided values and wrapping them in a new `ValueRc`. This is expensive, so this might be best limited to tests.",30,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"typed_string","","Construct a new `TypedValue::String` instance by cloning the provided value and wrapping it in a new `ValueRc`. This is expensive, so this might be best limited to tests.",30,{"inputs":[{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"current_instant","","",30,{"inputs":[],"output":{"name":"typedvalue"}}],[11,"instant","","Construct a new `TypedValue::Instant` instance from the provided microsecond timestamp.",30,{"inputs":[{"name":"i64"}],"output":{"name":"typedvalue"}}],[11,"into_known_entid","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"into_entid","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_kw","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"into_boolean","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_long","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_double","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_instant","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"into_timestamp","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"into_c_string","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_kw_c_string","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_uuid_c_string","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_uuid","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"into_uuid_string","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",39,{"inputs":[],"output":{"generics":["utc"],"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",39,{"inputs":[],"output":{"generics":["utc"],"name":"datetime"}}],[11,"all_enums","","",31,{"inputs":[],"output":{"generics":["valuetype"],"name":"enumset"}}],[11,"into_keyword","","",31,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"from_keyword","","",31,{"inputs":[{"name":"keyword"}],"output":{"generics":["valuetype"],"name":"option"}}],[11,"into_typed_value","","",31,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"into_edn_value","","",31,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"is_numeric","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"AttributeBuilder"],[4,"CardinalityConflict"],[4,"SchemaConstraintViolation"],[4,"InputError"],[4,"DbErrorKind"],[3,"DbError"],[3,"InProgressSQLiteAttributeCache"],[4,"AttributeSpec"],[8,"AttributeCache"],[3,"AevRows"],[3,"AttributeCaches"],[3,"SQLiteAttributeCache"],[3,"InProgressCacheTransactWatcher"],[4,"SearchType"],[8,"TypedSQLValue"],[8,"MentatStoring"],[8,"PartitionMapping"],[3,"IDENTS_SQL_LIST"],[3,"SCHEMA_SQL_LIST"],[3,"METADATA_SQL_LIST"],[4,"Term"],[4,"LookupRefOrTempId"],[3,"InProgressObserverTransactWatcher"],[8,"Command"],[3,"TxObserver"],[3,"TxCommand"],[3,"TxObservationService"],[3,"Attribute"],[4,"AttributeBitFlags"],[3,"Schema"],[4,"TypedValue"],[4,"ValueType"],[3,"Partition"],[3,"DB"],[3,"TxReport"],[8,"TransactableValue"],[8,"AttributeValidation"],[8,"TransactWatcher"],[3,"DateTime"],[3,"Utc"],[6,"PartitionMap"]]};
searchIndex["mentat_ffi"] = {"doc":"This module exposes an Foreign Function Interface (FFI) that allows Mentat to be called from other languages.","items":[[4,"Binding","mentat_ffi","The values bound in a query specification can be:",null,null],[13,"Scalar","","",0,null],[13,"Vec","","",0,null],[13,"Map","","",0,null],[4,"CacheDirection","","",null,null],[13,"Forward","","",1,null],[13,"Reverse","","",1,null],[13,"Both","","",1,null],[6,"Entid","","Represents one entid in the entid space.",null,null],[4,"FindSpec","","A definition of the first part of a find query: the `[:find ?foo ?bar…]` bit.",null,null],[13,"FindRel","","Returns an array of arrays, represented as a single array with length a multiple of width.",2,null],[13,"FindColl","","Returns an array of scalars, usually homogeneous. This is equivalent to mapping over the results of a `FindRel`, returning the first value of each.",2,null],[13,"FindTuple","","Returns a single tuple: a heterogeneous array of scalars. Equivalent to taking the first result from a `FindRel`.",2,null],[13,"FindScalar","","Returns a single scalar value. Equivalent to taking the first result from a `FindColl`.",2,null],[8,"HasSchema","","",null,null],[10,"entid_for_type","","",3,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["knownentid"],"name":"option"}}],[10,"get_ident","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["keyword"],"name":"option"}}],[10,"get_entid","","",3,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["knownentid"],"name":"option"}}],[10,"attribute_for_entid","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["attribute"],"name":"option"}}],[10,"attribute_for_ident","","",3,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"option"}}],[10,"is_attribute","","Return true if the provided entid identifies an attribute in this schema.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"identifies_attribute","","Return true if the provided ident identifies an attribute in this schema.",3,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[10,"component_attributes","","",3,null],[3,"InProgress","","Represents an in-progress, not yet committed, set of changes to the store. Call `commit` to commit your changes, or `rollback` to discard them. A transaction is held open until you do so. Your changes will be implicitly dropped along with this struct.",null,null],[3,"KnownEntid","","An entid that's either already in the store, or newly allocated to a tempid. TODO: we'd like to link this in some way to the lifetime of a particular PartitionMap.",null,null],[12,"0","","",4,null],[8,"Queryable","","",null,null],[10,"q_explain","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryexplanation","mentaterror"],"name":"result"}}],[10,"q_once","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryoutput","mentaterror"],"name":"result"}}],[10,"q_prepare","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["preparedquery","mentaterror"],"name":"result"}}],[10,"lookup_values_for_attribute","","",5,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["vec","mentaterror"],"name":"result"}}],[10,"lookup_value_for_attribute","","",5,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["option","mentaterror"],"name":"result"}}],[3,"QueryBuilder","","",null,null],[3,"QueryInputs","","Define the inputs to a query. This is in two parts: a set of values known now, and a set of types known now. The separate map of types is to allow queries to be algebrized without full knowledge of the bindings that will be used at execution time. When built correctly, `types` is guaranteed to contain the types of `values` -- use `QueryInputs::new` or `QueryInputs::with_values` to construct an instance.",null,null],[3,"QueryOutput","","",null,null],[12,"spec","","",6,null],[12,"results","","",6,null],[4,"QueryResults","","",null,null],[13,"Scalar","","",7,null],[13,"Tuple","","",7,null],[13,"Coll","","",7,null],[13,"Rel","","",7,null],[3,"RelResult","","The result you get from a 'rel' query, like:",null,null],[12,"width","","",8,null],[12,"values","","",8,null],[3,"Store","","A convenience wrapper around a single SQLite connection and a Conn. This is suitable for applications that don't require complex connection management.",null,null],[8,"Syncable","","",null,null],[10,"sync","","",9,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":{"generics":["error"],"name":"result"}}],[4,"TypedValue","","Represents a value that can be stored in a Mentat store.",null,null],[13,"Ref","","",10,null],[13,"Boolean","","",10,null],[13,"Long","","",10,null],[13,"Double","","",10,null],[13,"Instant","","",10,null],[13,"String","","",10,null],[13,"Keyword","","",10,null],[13,"Uuid","","",10,null],[3,"TxObserver","","",null,null],[3,"TxReport","","A transaction report summarizes an applied transaction.",null,null],[12,"tx_id","","The transaction ID of the transaction.",11,null],[12,"tx_instant","","The timestamp when the transaction began to be committed.",11,null],[12,"tempids","","A map from string literal tempid to resolved or allocated entid.",11,null],[3,"Uuid","","A Universally Unique Identifier (UUID).",null,null],[4,"ValueType","","The attribute of each Mentat assertion has a :db/valueType constraining the value to a particular set.  Mentat recognizes the following :db/valueType values.",null,null],[13,"Ref","","",12,null],[13,"Boolean","","",12,null],[13,"Instant","","",12,null],[13,"Long","","",12,null],[13,"Double","","",12,null],[13,"String","","",12,null],[13,"Keyword","","",12,null],[13,"Uuid","","",12,null],[3,"Variable","","",null,null],[12,"0","","",13,null],[8,"BuildTerms","","",null,null],[10,"named_tempid","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["tempid"],"name":"rc"}}],[10,"describe_tempid","","",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"entitybuilder"}}],[10,"describe","","",14,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"entitybuilder"}}],[10,"add","","",14,{"inputs":[{"name":"self"},{"name":"e"},{"name":"knownentid"},{"name":"v"}],"output":{"generics":["mentaterror"],"name":"result"}}],[10,"retract","","",14,{"inputs":[{"name":"self"},{"name":"e"},{"name":"knownentid"},{"name":"v"}],"output":{"generics":["mentaterror"],"name":"result"}}],[3,"EntityBuilder","","",null,null],[3,"InProgressBuilder","","",null,null],[8,"IntoThing","","",null,null],[10,"into_thing","","",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[3,"TransactionChange","","A C representation of the change provided by the transaction observers from a single transact. Holds a transaction identifier, the changes as a set of affected attributes and the length of the list of changes.",null,null],[12,"txid","","",16,null],[12,"changes","","",16,null],[12,"changes_len","","",16,null],[3,"TxChangeList","","A C representation of the list of changes provided by the transaction observers. Provides the list of changes as the length of the list.",null,null],[12,"reports","","",17,null],[12,"len","","",17,null],[3,"InProgressTransactResult","","",null,null],[12,"in_progress","","",18,null],[12,"tx_report","","",18,null],[12,"err","","",18,null],[5,"store_open","","A store cannot be opened twice to the same location. Once created, the reference to the store is held by the caller and not Rust, therefore the caller is responsible for calling `store_destroy` to release the memory used by the Store in order to avoid a memory leak.",null,null],[5,"store_begin_transaction","","Starts a new transaction to allow multiple transacts to be performed together. This is more efficient than performing a large set of individual commits.",null,null],[5,"in_progress_transact","","Perform a single transact operation using the current in progress transaction. Takes edn as a string to transact.",null,null],[5,"in_progress_commit","","Commit all the transacts that have been performed using this in progress transaction.",null,null],[5,"in_progress_rollback","","Rolls back all the transacts that have been performed using this in progress transaction.",null,null],[5,"in_progress_builder","","Creates a builder using the in progress transaction to allow for programmatic assertion of values.",null,null],[5,"in_progress_entity_builder_from_temp_id","","Creates a builder for an entity with `tempid` using the in progress transaction to allow for programmatic assertion of values for that entity.",null,null],[5,"in_progress_entity_builder_from_entid","","Creates a builder for an entity with `entid` using the in progress transaction to allow for programmatic assertion of values for that entity.",null,null],[5,"store_in_progress_builder","","Starts a new transaction and creates a builder using the transaction to allow for programmatic assertion of values.",null,null],[5,"store_entity_builder_from_temp_id","","Starts a new transaction and creates a builder for an entity with `tempid` using the transaction to allow for programmatic assertion of values for that entity.",null,null],[5,"store_entity_builder_from_entid","","Starts a new transaction and creates a builder for an entity with `entid` using the transaction to allow for programmatic assertion of values for that entity.",null,null],[5,"in_progress_builder_add_string","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_add_long","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_add_ref","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_add_keyword","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_add_boolean","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_add_double","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_add_timestamp","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_add_uuid","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_retract_string","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_retract_long","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_retract_ref","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_retract_keyword","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_retract_boolean","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_retract_double","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_retract_timestamp","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_retract_uuid","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"in_progress_builder_commit","","Transacts and commits all the assertions and retractions that have been performed using this builder.",null,null],[5,"in_progress_builder_transact","","Transacts all the assertions and retractions that have been performed using this builder.",null,null],[5,"entity_builder_add_string","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_add_long","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_add_ref","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_add_keyword","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_add_boolean","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_add_double","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_add_timestamp","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_add_uuid","","Uses `builder` to assert `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_retract_string","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_retract_long","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_retract_ref","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_retract_keyword","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_retract_boolean","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_retract_double","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_retract_timestamp","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_retract_uuid","","Uses `builder` to retract `value` for `kw` on entity `entid`.",null,null],[5,"entity_builder_transact","","Transacts all the assertions and retractions that have been performed using this builder.",null,null],[5,"entity_builder_commit","","Transacts and commits all the assertions and retractions that have been performed using this builder.",null,null],[5,"store_transact","","Performs a single transaction against the store.",null,null],[5,"tx_report_get_entid","","Fetches the `tx_id` for the given TxReport`.",null,null],[5,"tx_report_get_tx_instant","","Fetches the `tx_instant` for the given TxReport.",null,null],[5,"tx_report_entity_for_temp_id","","Fetches the Entid assigned to the `tempid` during the transaction represented by the given TxReport.",null,null],[5,"store_cache_attribute_forward","","Adds an attribute to the cache. `store_cache_attribute_forward` caches values for an attribute keyed by entity (i.e. find values and entities that have this attribute, or find values of attribute for an entity)",null,null],[5,"store_cache_attribute_reverse","","Adds an attribute to the cache. `store_cache_attribute_reverse` caches entities for an attribute keyed by value. (i.e. find entities that have a particular value for an attribute).",null,null],[5,"store_cache_attribute_bi_directional","","Adds an attribute to the cache. `store_cache_attribute_bi_directional` caches entity in both available directions, forward and reverse.",null,null],[5,"store_query","","Creates a QueryBuilder from the given store to execute the provided query.",null,null],[5,"query_builder_bind_long","","Binds a TypedValue::Long to a Variable with the given name.",null,null],[5,"query_builder_bind_ref","","Binds a TypedValue::Ref to a Variable with the given name.",null,null],[5,"query_builder_bind_ref_kw","","Binds a TypedValue::Ref to a Variable with the given name. Takes a keyword as a c string in the format `:namespace/name` and converts it into an NamespacedKeyworf.",null,null],[5,"query_builder_bind_kw","","Binds a TypedValue::Ref to a Variable with the given name. Takes a keyword as a c string in the format `:namespace/name` and converts it into an NamespacedKeyworf.",null,null],[5,"query_builder_bind_boolean","","Binds a TypedValue::Boolean to a Variable with the given name.",null,null],[5,"query_builder_bind_double","","Binds a TypedValue::Double to a Variable with the given name.",null,null],[5,"query_builder_bind_timestamp","","Binds a TypedValue::Instant to a Variable with the given name. Takes a timestamp in microseconds.",null,null],[5,"query_builder_bind_string","","Binds a TypedValue::String to a Variable with the given name.",null,null],[5,"query_builder_bind_uuid","","Binds a TypedValue::Uuid to a Variable with the given name. Takes a `UUID` as a byte slice of length 16. This maps directly to the `uuid_t` C type.",null,null],[5,"query_builder_execute_scalar","","Executes a query and returns the results as a Scalar.",null,null],[5,"query_builder_execute_coll","","Executes a query and returns the results as a Coll.",null,null],[5,"query_builder_execute_tuple","","Executes a query and returns the results as a Tuple.",null,null],[5,"query_builder_execute","","Executes a query and returns the results as a Rel.",null,null],[5,"typed_value_into_long","","Consumes a Binding and returns the value as a C `long`.",null,null],[5,"typed_value_into_entid","","Consumes a Binding and returns the value as an Entid.",null,null],[5,"typed_value_into_kw","","Consumes a Binding and returns the value as an keyword C `String`.",null,null],[5,"typed_value_into_boolean","","Consumes a Binding and returns the value as a boolean represented as an `i32`. If the value of the boolean is `true` the value returned is 1. If the value of the boolean is `false` the value returned is 0.",null,null],[5,"typed_value_into_double","","Consumes a Binding and returns the value as a `f64`.",null,null],[5,"typed_value_into_timestamp","","Consumes a Binding and returns the value as a microsecond timestamp.",null,null],[5,"typed_value_into_string","","Consumes a Binding and returns the value as a C `String`.",null,null],[5,"typed_value_into_uuid","","Consumes a Binding and returns the value as a UUID byte slice of length 16.",null,null],[5,"typed_value_value_type","","Returns the ValueType of this Binding.",null,null],[5,"row_at_index","","Returns the value at the provided `index` as a `Vec<ValueType>`. If there is no value present at the `index`, a null pointer is returned.",null,null],[5,"typed_value_result_set_into_iter","","Consumes the `RelResult<Binding>` and returns an iterator over the values.",null,null],[5,"typed_value_result_set_iter_next","","Returns the next value in the `iter` as a `Vec<ValueType>`. If there is no value next value, a null pointer is returned.",null,null],[5,"typed_value_list_into_iter","","Consumes the `Vec<Binding>` and returns an iterator over the values.",null,null],[5,"typed_value_list_iter_next","","Returns the next value in the `iter` as a Binding. If there is no value next value, a null pointer is returned.",null,null],[5,"value_at_index","","Returns the value at the provided `index` as a Binding. If there is no value present at the `index`, a null pointer is returned.",null,null],[5,"value_at_index_into_long","","Returns the value of the Binding at `index` as a `long`.",null,null],[5,"value_at_index_into_entid","","Returns the value of the Binding at `index` as an Entid.",null,null],[5,"value_at_index_into_kw","","Returns the value of the Binding at `index` as a keyword C `String`.",null,null],[5,"value_at_index_into_boolean","","Returns the value of the Binding at `index` as a boolean represented by a `i32`. If the value of the `boolean` is `true` then the value returned is 1. If the value of the `boolean` is `false` then the value returned is 0.",null,null],[5,"value_at_index_into_double","","Returns the value of the Binding at `index` as an `f64`.",null,null],[5,"value_at_index_into_timestamp","","Returns the value of the Binding at `index` as a microsecond timestamp.",null,null],[5,"value_at_index_into_string","","Returns the value of the Binding at `index` as a C `String`.",null,null],[5,"value_at_index_into_uuid","","Returns the value of the Binding at `index` as a UUID byte slice of length 16.",null,null],[5,"store_value_for_attribute","","Returns a pointer to the the Binding associated with the `attribute` as `:namespace/name` for the given `entid`. If there is a value for that `attribute` on the entity with id `entid` then the value is returned. If there no value for that `attribute` on the entity with id `entid` but the attribute is value, then a null pointer is returned. If there is no Attribute in the Schema for the given `attribute` then a null pointer is returned and an error is stored in is returned in `error`,",null,null],[5,"store_register_observer","","Registers a TxObserver with the `key` to observe changes to `attributes` on this `store`. Calls `callback` is a relevant transaction occurs.",null,null],[5,"store_unregister_observer","","Unregisters a TxObserver  with the `key` to observe changes on this `store`.",null,null],[5,"store_entid_for_attribute","","Returns the Entid  associated with the `attr` as `:namespace/name`.",null,null],[5,"tx_change_list_entry_at","","Returns the value at the provided `index` as a TransactionChange .",null,null],[5,"changelist_entry_at","","Returns the value at the provided `index` as a Entid .",null,null],[5,"rust_c_string_destroy","","",null,null],[5,"destroy","","",null,null],[5,"uuid_destroy","","",null,null],[5,"in_progress_builder_destroy","","",null,null],[5,"entity_builder_destroy","","",null,null],[5,"query_builder_destroy","","",null,null],[5,"store_destroy","","",null,null],[5,"tx_report_destroy","","",null,null],[5,"typed_value_destroy","","",null,null],[5,"typed_value_list_destroy","","",null,null],[5,"typed_value_list_iter_destroy","","",null,null],[5,"typed_value_result_set_destroy","","",null,null],[5,"typed_value_result_set_iter_destroy","","",null,null],[5,"in_progress_destroy","","",null,null],[0,"android","","",null,null],[4,"LogLevel","mentat_ffi::android","",null,null],[13,"Debug","","",19,null],[13,"Info","","",19,null],[13,"Warn","","",19,null],[13,"Error","","",19,null],[5,"__android_log_write","","",null,null],[0,"utils","mentat_ffi","",null,null],[0,"strings","mentat_ffi::utils","",null,null],[5,"c_char_to_string","mentat_ffi::utils::strings","",null,null],[5,"string_to_c_char","","",null,null],[5,"kw_from_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"keyword"}}],[0,"log","mentat_ffi::utils","",null,null],[5,"d","mentat_ffi::utils::log","",null,{"inputs":[{"name":"str"}],"output":null}],[0,"error","mentat_ffi::utils","",null,null],[3,"ExternError","mentat_ffi::utils::error","Represents an error that occurred on the mentat side. Many mentat FFI functions take a `*mut ExternError` as the last argument. This is an out parameter that indicates an error that occurred during that function's execution (if any).",null,null],[12,"message","","",20,null],[5,"translate_result","","Translate Result<T, E>, into something C can understand, when T is not `#[repr(C)]`",null,null],[5,"translate_opt_result","","Translate Result<Option, E> into something C can understand, when T is not `#[repr(C)]`.",null,null],[5,"translate_void_result","","Identical to `translate_result`, but with additional type checking for the case that we have a `Result<(), E>` (which we're about to drop on the floor).",null,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"externerror"}}],[6,"BindingIterator","mentat_ffi","",null,null],[6,"BindingListIterator","","",null,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"transactionchange"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"assert_not_null","","Helper macro for asserting one or more pointers are not null at the same time.",null,null],[11,"val","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"is_congruent_with","","Returns true if the provided type is `Some` and matches this value's type, or if the provided type is `None`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"matches_type","","",0,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"value_type","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["valuetype"],"name":"option"}}],[11,"into_known_entid","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"into_entid","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_kw","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"into_boolean","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_long","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_double","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_instant","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"into_timestamp","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"into_uuid","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"into_uuid_string","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"into_c_string","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_kw_c_string","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_uuid_c_string","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"named_tempid","","",21,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["tempid"],"name":"rc"}}],[11,"describe_tempid","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["inprogressbuilder"],"name":"entitybuilder"}}],[11,"describe","","",21,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["inprogressbuilder"],"name":"entitybuilder"}}],[11,"add","","",21,{"inputs":[{"name":"self"},{"name":"e"},{"name":"knownentid"},{"name":"v"}],"output":{"generics":["mentaterror"],"name":"result"}}],[11,"retract","","",21,{"inputs":[{"name":"self"},{"name":"e"},{"name":"knownentid"},{"name":"v"}],"output":{"generics":["mentaterror"],"name":"result"}}],[11,"entid_for_type","","",22,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"get_ident","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["keyword"],"name":"option"}}],[11,"get_entid","","",22,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"attribute_for_entid","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"attribute_for_ident","","",22,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"option"}}],[11,"is_attribute","","Return true if the provided entid identifies an attribute in this schema.",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"identifies_attribute","","Return true if the provided ident identifies an attribute in this schema.",22,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"component_attributes","","",22,null],[11,"q_once","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryoutput","mentaterror"],"name":"result"}}],[11,"q_prepare","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["preparedquery","mentaterror"],"name":"result"}}],[11,"q_explain","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryexplanation","mentaterror"],"name":"result"}}],[11,"lookup_values_for_attribute","","",22,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["vec","mentaterror"],"name":"result"}}],[11,"lookup_value_for_attribute","","",22,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["option","mentaterror"],"name":"result"}}],[11,"q_once","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryoutput","mentaterror"],"name":"result"}}],[11,"q_prepare","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["preparedquery","mentaterror"],"name":"result"}}],[11,"q_explain","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["queryexplanation","mentaterror"],"name":"result"}}],[11,"lookup_values_for_attribute","","",23,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["vec","mentaterror"],"name":"result"}}],[11,"lookup_value_for_attribute","","",23,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"}],"output":{"generics":["option","mentaterror"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"cachedirection"}}],[11,"ensure_vocabulary","","",22,{"inputs":[{"name":"self"},{"name":"definition"}],"output":{"generics":["vocabularyoutcome","mentaterror"],"name":"result"}}],[11,"ensure_vocabularies","","",22,{"inputs":[{"name":"self"},{"name":"vocabularysource"}],"output":{"generics":["btreemap","mentaterror"],"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"cachedirection"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"sync","","",23,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":{"generics":["error"],"name":"result"}}],[11,"pull_attributes_for_entities","","",23,{"inputs":[{"name":"self"},{"name":"e"},{"name":"a"}],"output":{"generics":["btreemap","mentaterror"],"name":"result"}}],[11,"pull_attributes_for_entity","","",23,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"a"}],"output":{"generics":["structuredmap","mentaterror"],"name":"result"}}],[11,"pull_attributes_for_entities","","",22,{"inputs":[{"name":"self"},{"name":"e"},{"name":"a"}],"output":{"generics":["btreemap","mentaterror"],"name":"result"}}],[11,"pull_attributes_for_entity","","",22,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"a"}],"output":{"generics":["structuredmap","mentaterror"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",24,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"deserialize","","",24,{"inputs":[{"name":"d"}],"output":{"generics":["uuid"],"name":"result"}}],[11,"rand","","",24,{"inputs":[{"name":"r"}],"output":{"name":"uuid"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"serialize","","",24,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default","","Returns the nil UUID, which is all zeroes",24,{"inputs":[],"output":{"name":"uuid"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"variable"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"findspec"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"findspec"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_value","","",13,{"inputs":[{"name":"valueandspan"}],"output":{"generics":["variable"],"name":"option"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"knownentid"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"from","","",0,{"inputs":[{"generics":["binding"],"name":"vec"}],"output":{"name":"binding"}}],[11,"from","","",10,{"inputs":[{"name":"bool"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"name":"uuid"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"generics":["string"],"name":"box"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"generics":["keyword"],"name":"rc"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"generics":["string"],"name":"arc"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"name":"knownentid"}],"output":{"name":"typedvalue"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"binding"}}],[11,"from","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"name":"keyword"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"generics":["utc"],"name":"datetime"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"name":"i32"}],"output":{"name":"typedvalue"}}],[11,"from","","",0,{"inputs":[{"name":"structuredmap"}],"output":{"name":"binding"}}],[11,"from","","",10,{"inputs":[{"name":"string"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"generics":["keyword"],"name":"arc"}],"output":{"name":"typedvalue"}}],[11,"from","","",10,{"inputs":[{"generics":["string"],"name":"rc"}],"output":{"name":"typedvalue"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"ordering"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"ordering"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"ordering"}}],[11,"deserialize","","",10,{"inputs":[{"name":"__d"}],"output":{"generics":["typedvalue"],"name":"result"}}],[11,"hash","","",10,null],[11,"hash","","",12,null],[11,"hash","","",4,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"knownentid"}],"output":{"name":"bool"}}],[11,"sql_representation","","",12,null],[11,"value_type_tag","","",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"accommodates_integer","","Returns true if the provided integer is in the SQLite value space of this type. For example, `1` is how we encode `true`.",12,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_u32","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_u32","","",12,{"inputs":[{"name":"u32"}],"output":{"name":"valuetype"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"txreport"}}],[11,"from_sql_value_pair","","Given a SQLite `value` and a `value_type_tag`, return the corresponding `TypedValue`.",10,{"inputs":[{"name":"value"},{"name":"i32"}],"output":{"generics":["typedvalue","dberror"],"name":"result"}}],[11,"from_edn_value","","Given an EDN `value`, return a corresponding Mentat `TypedValue`.",10,{"inputs":[{"name":"value"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"to_sql_value_pair","","Return the corresponding SQLite `value` and `value_type_tag` pair.",10,null],[11,"to_edn_value_pair","","Return the corresponding EDN `value` and `value_type` pair.",10,null],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_typed_value","","",10,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"valuetype"}],"output":{"generics":["typedvalue","dberror"],"name":"result"}}],[11,"into_entity_place","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["entityplace","dberror"],"name":"result"}}],[11,"as_tempid","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["tempid"],"name":"option"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"ordering"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"txreport"}],"output":{"name":"bool"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"queryinputs"}}],[11,"into_iter","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"relresult"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"queryresults"}}],[11,"from","","",7,{"inputs":[{"name":"queryoutput"}],"output":{"name":"queryresults"}}],[11,"from","","",8,{"inputs":[{"generics":["vec"],"name":"vec"}],"output":{"generics":["binding"],"name":"relresult"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"queryresults"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"queryresults"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"relresult"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"relresult"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"queryoutput"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"queryoutput"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_unit_limited","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"expected_column_count","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"requires_distinct","","Returns true if the provided `FindSpec` cares about distinct results.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"columns","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"builder","","",22,{"inputs":[{"name":"self"}],"output":{"name":"inprogressbuilder"}}],[11,"use_caching","","Choose whether to use in-memory caches for running queries.",22,null],[11,"transact_builder","","If you only have a reference to an `InProgress`, you can't use the easy builder. This exists so you can make your own.",22,{"inputs":[{"name":"self"},{"name":"termbuilder"}],"output":{"generics":["txreport","mentaterror"],"name":"result"}}],[11,"transact_terms","","",22,{"inputs":[{"name":"self"},{"name":"i"},{"generics":["tempid"],"name":"internset"}],"output":{"generics":["txreport","mentaterror"],"name":"result"}}],[11,"transact_entities","","",22,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["txreport","mentaterror"],"name":"result"}}],[11,"transact","","",22,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["txreport","mentaterror"],"name":"result"}}],[11,"import","","",22,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["txreport","mentaterror"],"name":"result"}}],[11,"rollback","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["mentaterror"],"name":"result"}}],[11,"commit","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["mentaterror"],"name":"result"}}],[11,"cache","","",22,{"inputs":[{"name":"self"},{"name":"keyword"},{"name":"cachedirection"},{"name":"cacheaction"}],"output":{"generics":["mentaterror"],"name":"result"}}],[11,"new","","",26,{"inputs":[{"name":"store"},{"name":"t"}],"output":{"name":"querybuilder"}}],[11,"bind_value","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"querybuilder"}}],[11,"bind_ref_from_kw","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"keyword"}],"output":{"generics":["querybuilder","mentaterror"],"name":"result"}}],[11,"bind_ref","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"querybuilder"}}],[11,"bind_long","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":{"name":"querybuilder"}}],[11,"bind_instant","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":{"name":"querybuilder"}}],[11,"bind_date_time","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["utc"],"name":"datetime"}],"output":{"name":"querybuilder"}}],[11,"bind_type","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"valuetype"}],"output":{"name":"querybuilder"}}],[11,"execute","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["queryoutput","mentaterror"],"name":"result"}}],[11,"execute_scalar","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["option","mentaterror"],"name":"result"}}],[11,"execute_coll","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["vec","mentaterror"],"name":"result"}}],[11,"execute_tuple","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["option","mentaterror"],"name":"result"}}],[11,"execute_rel","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["relresult","mentaterror"],"name":"result"}}],[11,"with_value_sequence","","",25,{"inputs":[{"name":"vec"}],"output":{"name":"queryinputs"}}],[11,"with_type_sequence","","",25,{"inputs":[{"name":"vec"}],"output":{"name":"queryinputs"}}],[11,"with_values","","",25,{"inputs":[{"generics":["variable","typedvalue"],"name":"btreemap"}],"output":{"name":"queryinputs"}}],[11,"new","","",25,{"inputs":[{"generics":["variable","valuetype"],"name":"btreemap"},{"generics":["variable","typedvalue"],"name":"btreemap"}],"output":{"generics":["queryinputs","algebrizererror"],"name":"result"}}],[11,"empty_factory","","",6,{"inputs":[{"name":"findspec"}],"output":{"generics":["fn"],"name":"box"}}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty","","",6,{"inputs":[{"name":"rc"}],"output":{"name":"queryoutput"}}],[11,"from_constants","","",6,{"inputs":[{"name":"rc"},{"generics":["variable","typedvalue"],"name":"btreemap"}],"output":{"name":"queryresults"}}],[11,"into_scalar","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["option","projectorerror"],"name":"result"}}],[11,"into_coll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["vec","projectorerror"],"name":"result"}}],[11,"into_tuple","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["option","projectorerror"],"name":"result"}}],[11,"into_rel","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["relresult","projectorerror"],"name":"result"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_scalar","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["option","projectorerror"],"name":"result"}}],[11,"into_coll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["vec","projectorerror"],"name":"result"}}],[11,"into_tuple","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["option","projectorerror"],"name":"result"}}],[11,"into_rel","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["relresult","projectorerror"],"name":"result"}}],[11,"empty","","",8,{"inputs":[{"name":"usize"}],"output":{"name":"relresult"}}],[11,"is_empty","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"row_count","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rows","","",8,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"row","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"open","","Open a store at the supplied path, ensuring that it includes the bootstrap schema.",23,{"inputs":[{"name":"str"}],"output":{"generics":["store","mentaterror"],"name":"result"}}],[11,"open_empty","","Returns a totally blank store with no bootstrap schema. Use `open` instead.",23,{"inputs":[{"name":"str"}],"output":{"generics":["store","mentaterror"],"name":"result"}}],[11,"transact","","",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["txreport","mentaterror"],"name":"result"}}],[11,"sqlite_mut","","Intended for use from tests.",23,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"dismantle","","",23,null],[11,"conn","","",23,{"inputs":[{"name":"self"}],"output":{"name":"conn"}}],[11,"begin_read","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["inprogressread","mentaterror"],"name":"result"}}],[11,"begin_transaction","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["inprogress","mentaterror"],"name":"result"}}],[11,"cache","","",23,{"inputs":[{"name":"self"},{"name":"keyword"},{"name":"cachedirection"}],"output":{"generics":["mentaterror"],"name":"result"}}],[11,"register_observer","","",23,null],[11,"unregister_observer","","",23,null],[11,"is_congruent_with","","Returns true if the provided type is `Some` and matches this value's type, or if the provided type is `None`.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"matches_type","","",10,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"value_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"typed_ns_keyword","","Construct a new `TypedValue::Keyword` instance by cloning the provided values and wrapping them in a new `ValueRc`. This is expensive, so this might be best limited to tests.",10,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"typed_string","","Construct a new `TypedValue::String` instance by cloning the provided value and wrapping it in a new `ValueRc`. This is expensive, so this might be best limited to tests.",10,{"inputs":[{"name":"str"}],"output":{"name":"typedvalue"}}],[11,"current_instant","","",10,{"inputs":[],"output":{"name":"typedvalue"}}],[11,"instant","","Construct a new `TypedValue::Instant` instance from the provided microsecond timestamp.",10,{"inputs":[{"name":"i64"}],"output":{"name":"typedvalue"}}],[11,"into_known_entid","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["knownentid"],"name":"option"}}],[11,"into_entid","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_kw","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"into_boolean","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_long","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_double","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_instant","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"into_timestamp","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"into_c_string","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_kw_c_string","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_uuid_c_string","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_uuid","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"into_uuid_string","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"new","","",27,{"inputs":[{"generics":["i64"],"name":"btreeset"},{"name":"f"}],"output":{"name":"txobserver"}}],[11,"applicable_reports","","",27,{"inputs":[{"name":"self"},{"name":"indexmap"}],"output":{"generics":["i64","btreeset","randomstate"],"name":"indexmap"}}],[11,"nil","","The 'nil UUID'.",24,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",24,{"inputs":[{"name":"uuidversion"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",24,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",24,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",24,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",24,{"inputs":[{"name":"self"}],"output":{"generics":["uuidvariant"],"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",24,{"inputs":[{"name":"self"}],"output":{"generics":["uuidversion"],"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",24,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",24,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",24,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",24,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and  counter portion of a V1 UUID.  If the supplied UUID is not V1, this  will return None",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",24,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"all_enums","","",12,{"inputs":[],"output":{"generics":["valuetype"],"name":"enumset"}}],[11,"into_keyword","","",12,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"from_keyword","","",12,{"inputs":[{"name":"keyword"}],"output":{"generics":["valuetype"],"name":"option"}}],[11,"into_typed_value","","",12,{"inputs":[{"name":"self"}],"output":{"name":"typedvalue"}}],[11,"into_edn_value","","",12,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"is_numeric","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_string","","",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"name","","",13,{"inputs":[{"name":"self"}],"output":{"name":"plainsymbol"}}],[11,"from_valid_name","","Return a new `Variable`, assuming that the provided string is a valid name.",13,{"inputs":[{"name":"str"}],"output":{"name":"variable"}}],[11,"from_rc","","",13,{"inputs":[{"generics":["plainsymbol"],"name":"rc"}],"output":{"generics":["variable"],"name":"option"}}],[11,"from_symbol","","TODO: intern strings. #398.",13,{"inputs":[{"name":"plainsymbol"}],"output":{"generics":["variable"],"name":"option"}}],[11,"finish","","",28,null],[11,"add","","",28,{"inputs":[{"name":"self"},{"name":"knownentid"},{"name":"v"}],"output":{"generics":["mentaterror"],"name":"result"}}],[11,"retract","","",28,{"inputs":[{"name":"self"},{"name":"knownentid"},{"name":"v"}],"output":{"generics":["mentaterror"],"name":"result"}}],[11,"add_kw","","",28,{"inputs":[{"name":"self"},{"name":"keyword"},{"name":"v"}],"output":{"generics":["mentaterror"],"name":"result"}}],[11,"retract_kw","","",28,{"inputs":[{"name":"self"},{"name":"keyword"},{"name":"v"}],"output":{"generics":["mentaterror"],"name":"result"}}],[11,"transact","","Build the terms from this builder and transact them against the current `InProgress`. This method always returns the `InProgress` -- failure doesn't imply an automatic rollback.",28,null],[11,"commit","","Transact the contents of the builder and commit the `InProgress`. If any step fails, roll back. Return the `TxReport`.",28,{"inputs":[{"name":"self"}],"output":{"generics":["txreport","mentaterror"],"name":"result"}}],[11,"new","","",21,{"inputs":[{"name":"inprogress"}],"output":{"name":"inprogressbuilder"}}],[11,"transact","","Build the terms from this builder and transact them against the current `InProgress`. This method always returns the `InProgress` -- failure doesn't imply an automatic rollback.",21,null],[11,"commit","","Transact the contents of the builder and commit the `InProgress`. If any step fails, roll back. Return the `TxReport`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["txreport","mentaterror"],"name":"result"}}],[11,"add_kw","","",21,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"},{"name":"v"}],"output":{"generics":["mentaterror"],"name":"result"}}],[11,"retract_kw","","",21,{"inputs":[{"name":"self"},{"name":"e"},{"name":"keyword"},{"name":"v"}],"output":{"generics":["mentaterror"],"name":"result"}}]],"paths":[[4,"Binding"],[4,"CacheDirection"],[4,"FindSpec"],[8,"HasSchema"],[3,"KnownEntid"],[8,"Queryable"],[3,"QueryOutput"],[4,"QueryResults"],[3,"RelResult"],[8,"Syncable"],[4,"TypedValue"],[3,"TxReport"],[4,"ValueType"],[3,"Variable"],[8,"BuildTerms"],[8,"IntoThing"],[3,"TransactionChange"],[3,"TxChangeList"],[3,"InProgressTransactResult"],[4,"LogLevel"],[3,"ExternError"],[3,"InProgressBuilder"],[3,"InProgress"],[3,"Store"],[3,"Uuid"],[3,"QueryInputs"],[3,"QueryBuilder"],[3,"TxObserver"],[3,"EntityBuilder"]]};
searchIndex["mentat_parser_utils"] = {"doc":"","items":[[3,"ValueParseError","mentat_parser_utils","A `ValueParseError` is a `combine::primitives::ParseError`-alike that implements the `Debug`, `Display`, and `std::error::Error` traits.  In addition, it doesn't capture references.",null,null],[12,"position","","",0,null],[12,"errors","","",0,null],[0,"macros","","",null,null],[3,"KeywordMapParser","mentat_parser_utils::macros","",null,null],[12,"0","","",1,null],[6,"ResultParser","","A type definition for a function parser that either parses an `O` from an input stream of type `I`, or fails with an \"expected\" failure. See https://docs.rs/combine/2.2.1/combine/trait.Parser.html#method.expected for more illumination. Nothing about this is specific to the result type of the parser.",null,null],[0,"log","mentat_parser_utils","",null,null],[0,"value_and_span","","",null,null],[3,"SpanPosition","mentat_parser_utils::value_and_span","A wrapper to let us order `edn::Span` in whatever way is appropriate for parsing with `combine`.",null,null],[12,"0","","",2,null],[3,"Stream","","A single `combine::Stream` implementation iterating `edn::ValueAndSpan` instances.  Equivalent to `combine::IteratorStream` as produced by `combine::from_iter`, but specialized to `edn::ValueAndSpan`.",null,null],[3,"OfExactly","","`OfExactly` and `of_exactly` allow us to express nested parsers naturally.",null,null],[4,"Iter","","An iterator specifically for iterating `edn::ValueAndSpan` instances in various ways.",null,null],[13,"Empty","","",3,null],[13,"Atom","","",3,null],[13,"Vector","","",3,null],[13,"List","","",3,null],[13,"Map","","Iterates a map {:k1 v1, :k2 v2, ...} as a single `flat_map` slice [k1, v1, k2, v2, ...].",3,null],[13,"KeywordMap","","Iterates a map with vector values {:k1 [v11 v12 ...], :k2 [v21 v22 ...], ...} as a single flattened map [k1, v11, v12, ..., k2, v21, v22, ...].",3,null],[5,"of_exactly","","",null,{"inputs":[{"name":"p"},{"name":"n"}],"output":{"name":"ofexactly"}}],[5,"vector_","","Shorthands, just enough to convert the `mentat_db` crate for now.  Written using `Box` for now: it's simple and we can address allocation issues if and when they surface.",null,{"inputs":[{"name":"stream"}],"output":{"generics":["stream","stream"],"name":"parseresult"}}],[5,"vector","","",null,{"inputs":[],"output":{"generics":["fnparser"],"name":"expected"}}],[5,"list_","","",null,{"inputs":[{"name":"stream"}],"output":{"generics":["stream","stream"],"name":"parseresult"}}],[5,"list","","",null,{"inputs":[],"output":{"generics":["fnparser"],"name":"expected"}}],[5,"seq_","","",null,{"inputs":[{"name":"stream"}],"output":{"generics":["stream","stream"],"name":"parseresult"}}],[5,"seq","","",null,{"inputs":[],"output":{"generics":["fnparser"],"name":"expected"}}],[5,"map_","","",null,{"inputs":[{"name":"stream"}],"output":{"generics":["stream","stream"],"name":"parseresult"}}],[5,"map","","",null,{"inputs":[],"output":{"generics":["fnparser"],"name":"expected"}}],[5,"is_valid_keyword_map_k_v","","A `[k v]` pair in the map form of a keyword map must have the shape `[:k, [v1, v2, ...]]`, with none of `v1`, `v2`, ... a keyword: without loss of generality, we cannot represent the case where `vn` is a keyword `:l`, since `[:k v1 v2 ... :l]`, isn't a valid keyword map in vector form.  This function tests that a `[k v]` pair obeys these constraints.",null,null],[5,"keyword_map_","","",null,{"inputs":[{"name":"stream"}],"output":{"generics":["stream","stream"],"name":"parseresult"}}],[5,"keyword_map","","",null,{"inputs":[],"output":{"generics":["fnparser"],"name":"expected"}}],[5,"integer_","","",null,{"inputs":[{"name":"stream"}],"output":{"generics":["i64","stream"],"name":"parseresult"}}],[5,"integer","","",null,{"inputs":[],"output":{"generics":["fnparser"],"name":"expected"}}],[5,"any_keyword_","","",null,{"inputs":[{"name":"stream"}],"output":{"generics":["keyword","stream"],"name":"parseresult"}}],[5,"namespaced_keyword_","","",null,{"inputs":[{"name":"stream"}],"output":{"generics":["keyword","stream"],"name":"parseresult"}}],[5,"any_keyword","","",null,{"inputs":[],"output":{"generics":["fnparser"],"name":"expected"}}],[5,"namespaced_keyword","","",null,{"inputs":[],"output":{"generics":["fnparser"],"name":"expected"}}],[5,"forward_any_keyword_","","",null,{"inputs":[{"name":"stream"}],"output":{"generics":["keyword","stream"],"name":"parseresult"}}],[5,"forward_any_keyword","","",null,{"inputs":[],"output":{"generics":["fnparser"],"name":"expected"}}],[5,"forward_namespaced_keyword_","","",null,{"inputs":[{"name":"stream"}],"output":{"generics":["keyword","stream"],"name":"parseresult"}}],[5,"forward_namespaced_keyword","","",null,{"inputs":[],"output":{"generics":["fnparser"],"name":"expected"}}],[5,"backward_namespaced_keyword_","","",null,{"inputs":[{"name":"stream"}],"output":{"generics":["keyword","stream"],"name":"parseresult"}}],[5,"backward_namespaced_keyword","","",null,{"inputs":[],"output":{"generics":["fnparser"],"name":"expected"}}],[8,"Item","","Things specific to parsing with `combine` and our `Stream` that need a trait to live outside of the `edn` crate.",null,null],[16,"Position","","Position could be specialized to `SpanPosition`.",4,null],[10,"start","","A slight generalization of `combine::Positioner` that allows to set the position based on the `edn::ValueAndSpan` being iterated.",4,null],[10,"update_position","","",4,null],[10,"child_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[10,"child_stream","","",4,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[10,"atom_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[10,"atom_stream","","",4,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[10,"keyword_map_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[10,"keyword_map_stream","","",4,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[8,"Streaming","","",null,null],[10,"as_stream","","",5,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[8,"OfExactlyParsing","","We need a trait to define `Parser.of` and have it live outside of the `combine` crate.",null,null],[10,"of_exactly","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ofexactly"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"spanposition"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ofexactly"}}],[11,"as_stream","","",7,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"parse_lazy","","",8,null],[11,"add_error","","",8,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":null}],[11,"uncons","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"position","","",7,null],[11,"parse_lazy","mentat_parser_utils::macros","",1,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"generics":["stream"],"name":"consumedresult"}}],[11,"parse_lazy","","",1,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"generics":["stream"],"name":"consumedresult"}}],[11,"parse_lazy","","",1,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"generics":["stream"],"name":"consumedresult"}}],[11,"parse_lazy","","",1,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"generics":["stream"],"name":"consumedresult"}}],[11,"parse_lazy","","",1,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"generics":["stream"],"name":"consumedresult"}}],[11,"parse_lazy","","",1,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"generics":["stream"],"name":"consumedresult"}}],[11,"eq","mentat_parser_utils","",0,{"inputs":[{"name":"self"},{"name":"valueparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"valueparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"generics":["stream"],"name":"parseerror"}],"output":{"name":"valueparseerror"}}],[14,"satisfy_unwrap","","`satisfy_unwrap!` makes it a little easier to implement a `satisfy_map` body that matches a particular `Value` enum case, otherwise returning `None`.",null,null],[14,"matches_plain_symbol","","Generate a `satisfy_map` expression that matches a `PlainSymbol` value with the given name.",null,null],[14,"def_parser","","",null,null],[14,"assert_parses_to","","`assert_parses_to!` simplifies some of the boilerplate around running a parser function against input and expecting a certain result.",null,null],[14,"assert_edn_parses_to","","`assert_edn_parses_to!` simplifies some of the boilerplate around running a parser function against string input and expecting a certain result.",null,null],[14,"assert_parse_failure_contains","","`assert_parse_failure_contains!` simplifies running a parser function against string input and expecting a certain failure.  This is working around the complexity of pattern matching parse errors that contain spans.",null,null],[14,"keyword_map_of","","",null,null],[14,"def_matches_plain_symbol","","Generate a `satisfy` expression that matches a `PlainSymbol` value with the given name.",null,null],[14,"def_matches_keyword","","Generate a `satisfy` expression that matches a `Keyword` value with the given name.",null,null],[14,"def_matches_namespaced_keyword","","Generate a `satisfy` expression that matches a `Keyword` value with the given namespace and name.",null,null]],"paths":[[3,"ValueParseError"],[3,"KeywordMapParser"],[3,"SpanPosition"],[4,"Iter"],[8,"Item"],[8,"Streaming"],[8,"OfExactlyParsing"],[3,"Stream"],[3,"OfExactly"]]};
searchIndex["mentat_query"] = {"doc":"","items":[],"paths":[]};
searchIndex["mentat_query_algebrizer"] = {"doc":"","items":[[3,"QueryInputs","mentat_query_algebrizer","Define the inputs to a query. This is in two parts: a set of values known now, and a set of types known now. The separate map of types is to allow queries to be algebrized without full knowledge of the bindings that will be used at execution time. When built correctly, `types` is guaranteed to contain the types of `values` -- use `QueryInputs::new` or `QueryInputs::with_values` to construct an instance.",null,null],[3,"FindQuery","","A `FindQuery` represents a valid query to the query algebrizer.",null,null],[12,"find_spec","","",0,null],[12,"default_source","","",0,null],[12,"with","","",0,null],[12,"in_vars","","",0,null],[12,"in_sources","","",0,null],[12,"limit","","",0,null],[12,"where_clauses","","",0,null],[12,"order","","",0,null],[3,"Known","","A convenience wrapper around things known in memory: the schema and caches. We use a trait object here to avoid making dozens of functions generic over the type of the cache. If performance becomes a concern, we should hard-code specific kinds of cache right here, and/or eliminate the Option.",null,null],[12,"schema","","",1,null],[12,"cache","","",1,null],[3,"AlgebraicQuery","","",null,null],[12,"find_spec","","",2,null],[12,"with","","The set of variables that the caller wishes to be used for grouping when aggregating. These are specified in the query input, as `:with`, and are then chewed up during projection. If no variables are supplied, then no additional grouping is necessary beyond the non-aggregated projection list.",2,null],[12,"named_projection","","Some query features, such as ordering, are implemented by implicit reference to SQL columns. In order for these references to be 'live', those columns must be projected. This is the set of variables that must be so projected. This is not necessarily every variable that will be so required -- some variables will already be in the projection list.",2,null],[12,"order","","",2,null],[12,"limit","","",2,null],[12,"cc","","",2,null],[3,"ConjoiningClauses","","A `ConjoiningClauses` (CC) is a collection of clauses that are combined with `JOIN`.  The topmost form in a query is a `ConjoiningClauses`.",null,null],[12,"empty_because","","`Some` if this set of clauses cannot yield results in the context of the current schema.",3,null],[12,"from","","A vector of source/alias pairs used to construct a SQL `FROM` list.",3,null],[12,"computed_tables","","A vector of computed tables (typically subqueries). The index into this vector is used as an identifier in a `DatomsTable::Computed(c)` table reference.",3,null],[12,"wheres","","A list of fragments that can be joined by `AND`.",3,null],[12,"column_bindings","","A map from var to qualified columns. Used to project.",3,null],[12,"input_variables","","A list of variables mentioned in the enclosing query's :in clause. These must all be bound before the query can be executed. TODO: clarify what this means for nested CCs.",3,null],[12,"known_types","","A map from var to type. Whenever a var maps unambiguously to two different types, it cannot yield results, so we don't represent that case here. If a var isn't present in the map, it means that its type is not known in advance. Usually that state should be represented by `ValueTypeSet::Any`.",3,null],[12,"extracted_types","","A mapping, similar to `column_bindings`, but used to pull type tags out of the store at runtime. If a var isn't unit in `known_types`, it should be present here.",3,null],[3,"ColumnAlternation","","A `ColumnAlternation` constraint is satisfied if at least one of its inner constraints is satisfied. An empty `ColumnAlternation` is never satisfied.",null,null],[12,"0","","",4,null],[3,"ColumnIntersection","","A `ColumnIntersection` constraint is satisfied if all of its inner constraints are satisfied. An empty intersection is always satisfied.",null,null],[12,"0","","",5,null],[3,"OrderBy","","Represents an entry in the ORDER BY list: a variable or a variable's type tag. (We require order vars to be projected, so we can simply use a variable here.)",null,null],[12,"0","","",6,null],[12,"1","","",6,null],[3,"QualifiedAlias","","A particular column of a particular aliased table. E.g., \"datoms123\", Attribute.",null,null],[12,"0","","",7,null],[12,"1","","",7,null],[3,"SourceAlias","","The association between a table and its alias. E.g., AllDatoms, \"all_datoms123\".",null,null],[12,"0","","",8,null],[12,"1","","",8,null],[4,"AlgebrizerError","","",null,null],[13,"DuplicateVariableError","","",9,null],[13,"UnsupportedArgument","","",9,null],[13,"InputTypeDisagreement","","",9,null],[13,"InvalidNumberOfArguments","","",9,null],[13,"InvalidArgument","","",9,null],[13,"InvalidArgumentType","","",9,null],[13,"InvalidGroundConstant","","",9,null],[13,"InvalidLimit","","",9,null],[13,"GroundBindingsMismatch","","",9,null],[13,"UnrecognizedIdent","","",9,null],[13,"UnknownFunction","","",9,null],[13,"UnknownLimitVar","","",9,null],[13,"UnboundVariable","","",9,null],[13,"NonMatchingVariablesInOrClause","","",9,null],[13,"NonMatchingVariablesInNotClause","","",9,null],[13,"InvalidBinding","","",9,null],[13,"EdnParseError","","",9,null],[4,"BindingError","","",null,null],[13,"NoBoundVariable","","",10,null],[13,"UnexpectedBinding","","",10,null],[13,"RepeatedBoundVariable","","",10,null],[13,"ExpectedBindRel","","Expected `[[?x ?y]]` but got some other type of binding.  Mentat is deliberately more strict than Datomic: we won't try to make sense of non-obvious (and potentially erroneous) bindings.",10,null],[13,"ExpectedBindRelOrBindColl","","Expected `[[?x ?y]]` or `[?x ...]` but got some other type of binding.  Mentat is deliberately more strict than Datomic: we won't try to make sense of non-obvious (and potentially erroneous) bindings.",10,null],[13,"InvalidNumberOfBindings","","Expected `[?x1 … ?xN]` or `[[?x1 … ?xN]]` but got some other number of bindings.  Mentat is deliberately more strict than Datomic: we prefer placeholders to omission.",10,null],[12,"number","mentat_query_algebrizer::BindingError","",10,null],[12,"expected","","",10,null],[4,"EmptyBecause","mentat_query_algebrizer","",null,null],[13,"CachedAttributeHasNoValues","","",11,null],[12,"entity","mentat_query_algebrizer::EmptyBecause","",11,null],[12,"attr","","",11,null],[13,"CachedAttributeHasNoEntity","mentat_query_algebrizer","",11,null],[12,"value","mentat_query_algebrizer::EmptyBecause","",11,null],[12,"attr","","",11,null],[13,"ConflictingBindings","mentat_query_algebrizer","",11,null],[12,"var","mentat_query_algebrizer::EmptyBecause","",11,null],[12,"existing","","",11,null],[12,"desired","","",11,null],[13,"TypeMismatch","mentat_query_algebrizer","",11,null],[12,"var","mentat_query_algebrizer::EmptyBecause","",11,null],[12,"existing","","",11,null],[12,"desired","","",11,null],[13,"KnownTypeMismatch","mentat_query_algebrizer","",11,null],[12,"left","mentat_query_algebrizer::EmptyBecause","",11,null],[12,"right","","",11,null],[13,"NoValidTypes","mentat_query_algebrizer","",11,null],[13,"NonAttributeArgument","","",11,null],[13,"NonInstantArgument","","",11,null],[13,"NonNumericArgument","","",11,null],[13,"NonEntityArgument","","",11,null],[13,"NonStringFulltextValue","","",11,null],[13,"NonFulltextAttribute","","",11,null],[13,"UnresolvedIdent","","",11,null],[13,"InvalidAttributeIdent","","",11,null],[13,"InvalidAttributeEntid","","",11,null],[13,"InvalidBinding","","",11,null],[13,"ValueTypeMismatch","","",11,null],[13,"AttributeLookupFailed","","",11,null],[4,"Column","","",null,null],[13,"Fixed","","",12,null],[13,"Fulltext","","",12,null],[13,"Variable","","",12,null],[13,"Transactions","","",12,null],[4,"ColumnConstraint","","",null,null],[13,"Equals","","",13,null],[13,"Inequality","","",13,null],[12,"operator","mentat_query_algebrizer::ColumnConstraint","",13,null],[12,"left","","",13,null],[12,"right","","",13,null],[13,"HasTypes","mentat_query_algebrizer","",13,null],[12,"value","mentat_query_algebrizer::ColumnConstraint","",13,null],[12,"value_types","","",13,null],[12,"check_value","","",13,null],[13,"NotExists","mentat_query_algebrizer","",13,null],[13,"Matches","","",13,null],[4,"ColumnConstraintOrAlternation","","",null,null],[13,"Constraint","","",14,null],[13,"Alternation","","",14,null],[4,"ComputedTable","","A source of rows that isn't a named table -- typically a subquery or union.",null,null],[13,"Subquery","","",15,null],[13,"Union","","",15,null],[12,"projection","mentat_query_algebrizer::ComputedTable","",15,null],[12,"type_extraction","","",15,null],[12,"arms","","",15,null],[13,"NamedValues","mentat_query_algebrizer","",15,null],[12,"names","mentat_query_algebrizer::ComputedTable","",15,null],[12,"values","","",15,null],[4,"DatomsColumn","mentat_query_algebrizer","One of the named columns of our tables.",null,null],[13,"Entity","","",16,null],[13,"Attribute","","",16,null],[13,"Value","","",16,null],[13,"Tx","","",16,null],[13,"ValueTypeTag","","",16,null],[4,"DatomsTable","","This enum models the fixed set of default tables we have -- two tables and two views -- and computed tables defined in the enclosing CC.",null,null],[13,"Datoms","","",17,null],[13,"FulltextValues","","",17,null],[13,"FulltextDatoms","","",17,null],[13,"AllDatoms","","",17,null],[13,"Computed","","",17,null],[13,"Transactions","","",17,null],[4,"FulltextColumn","","One of the named columns of our fulltext values table.",null,null],[13,"Rowid","","",18,null],[13,"Text","","",18,null],[4,"QueryValue","","",null,null],[13,"Column","","",19,null],[13,"Entid","","",19,null],[13,"TypedValue","","",19,null],[13,"PrimitiveLong","","",19,null],[4,"VariableColumn","","",null,null],[13,"Variable","","",20,null],[13,"VariableTypeTag","","",20,null],[5,"algebrize_with_counter","","",null,{"inputs":[{"name":"known"},{"name":"findquery"},{"name":"usize"}],"output":{"generics":["algebraicquery"],"name":"result"}}],[5,"algebrize","","",null,{"inputs":[{"name":"known"},{"name":"findquery"}],"output":{"generics":["algebraicquery"],"name":"result"}}],[5,"algebrize_with_inputs","","",null,{"inputs":[{"name":"known"},{"name":"findquery"},{"name":"usize"},{"name":"queryinputs"}],"output":{"generics":["algebraicquery"],"name":"result"}}],[5,"parse_find_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["findquery"],"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bindingerror"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"bindingerror"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"bindingerror"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"algebrizererror"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"algebrizererror"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"algebrizererror"}],"output":{"name":"bool"}}],[11,"from","","",9,{"inputs":[{"name":"ednparseerror"}],"output":{"name":"algebrizererror"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"datomstable"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"datomstable"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"datomstable"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"computedtable"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"computedtable"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"datomscolumn"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"datomscolumn"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"fulltextcolumn"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"fulltextcolumn"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"variablecolumn"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"variablecolumn"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"variablecolumn"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"from","","",12,{"inputs":[{"name":"datomscolumn"}],"output":{"name":"column"}}],[11,"from","","",12,{"inputs":[{"name":"variablecolumn"}],"output":{"name":"column"}}],[11,"as_str","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"associated_type_tag_column","","The type of the `v` column is determined by the `value_type_tag` column.  Return the associated column determining the type of this column, if there is one.",16,{"inputs":[{"name":"self"}],"output":{"generics":["datomscolumn"],"name":"option"}}],[11,"column_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"column_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"column_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"sourcealias"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"sourcealias"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"sourcealias"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"qualifiedalias"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"qualifiedalias"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"qualifiedalias"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",7,{"inputs":[{"name":"tablealias"},{"name":"c"}],"output":{"name":"self"}}],[11,"for_associated_type_tag","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["qualifiedalias"],"name":"option"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"queryvalue"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"queryvalue"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"queryvalue"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"orderby"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"orderby"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"orderby"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"order"}],"output":{"name":"orderby"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"columnconstraint"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"columnconstraint"}],"output":{"name":"bool"}}],[11,"has_unit_type","","",13,{"inputs":[{"name":"tablealias"},{"name":"valuetype"}],"output":{"name":"columnconstraint"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"columnconstraintoralternation"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"columnconstraintoralternation"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"columnconstraint"}],"output":{"name":"self"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"columnintersection"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"columnintersection"}],"output":{"name":"bool"}}],[11,"from","","",5,{"inputs":[{"generics":["columnconstraint"],"name":"vec"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"into_iter","","",5,null],[11,"len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"columnconstraintoralternation"}],"output":null}],[11,"add_intersection","","",5,{"inputs":[{"name":"self"},{"name":"columnconstraint"}],"output":null}],[11,"append","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"columnalternation"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"columnalternation"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"into_iter","","",4,null],[11,"add_alternate","","",4,{"inputs":[{"name":"self"},{"name":"columnintersection"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"emptybecause"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"emptybecause"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"emptybecause"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"findquery"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"findquery"}],"output":{"name":"bool"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"with_value_sequence","","",21,{"inputs":[{"name":"vec"}],"output":{"name":"queryinputs"}}],[11,"with_type_sequence","","",21,{"inputs":[{"name":"vec"}],"output":{"name":"queryinputs"}}],[11,"with_values","","",21,{"inputs":[{"generics":["variable","typedvalue"],"name":"btreemap"}],"output":{"name":"queryinputs"}}],[11,"new","","",21,{"inputs":[{"generics":["variable","valuetype"],"name":"btreemap"},{"generics":["variable","typedvalue"],"name":"btreemap"}],"output":{"generics":["queryinputs"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"conjoiningclauses"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"conjoiningclauses"}}],[11,"bind_value","","Be careful with this. It'll overwrite existing bindings.",3,{"inputs":[{"name":"self"},{"name":"variable"},{"name":"typedvalue"}],"output":null}],[11,"bound_value","","",3,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"is_value_bound","","",3,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"value_bindings","","",3,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"variablebindings"}}],[11,"value_bound_variables","","Return an iterator over the variables externally bound to values.",3,{"inputs":[{"name":"self"}],"output":{"name":"variableiterator"}}],[11,"value_bound_variable_set","","Return a set of the variables externally bound to values.",3,{"inputs":[{"name":"self"}],"output":{"generics":["variable"],"name":"btreeset"}}],[11,"known_type","","Return a single `ValueType` if the given variable is known to have a precise type. Returns `None` if the type of the variable is unknown. Returns `None` if the type of the variable is known but not precise -- \"double or integer\" isn't good enough.",3,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"generics":["valuetype"],"name":"option"}}],[11,"known_type_set","","",3,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"valuetypeset"}}],[11,"is_known_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"Result","","",null,null],[6,"VariableBindings","","",null,null],[6,"TableAlias","","A specific instance of a table within a query. E.g., \"datoms123\".",null,null],[8,"ColumnName","","",null,null],[10,"column_name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"known"}}],[11,"for_schema","","",1,{"inputs":[{"name":"schema"}],"output":{"name":"known"}}],[11,"new","","",1,{"inputs":[{"name":"schema"},{"generics":["cachedattributes"],"name":"option"}],"output":{"name":"known"}}],[11,"is_attribute_cached_reverse","","",1,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"is_attribute_cached_forward","","",1,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"get_values_for_entid","","",1,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"u"},{"name":"v"}],"output":{"generics":["vec"],"name":"option"}}],[11,"get_value_for_entid","","",1,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"u"},{"name":"v"}],"output":{"generics":["typedvalue"],"name":"option"}}],[11,"get_entid_for_value","","",1,{"inputs":[{"name":"self"},{"name":"u"},{"name":"typedvalue"}],"output":{"generics":["entid"],"name":"option"}}],[11,"get_entids_for_value","","",1,{"inputs":[{"name":"self"},{"name":"u"},{"name":"typedvalue"}],"output":{"generics":["btreeset"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_known_empty","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fully_bound","","Return true if every variable in the find spec is fully bound to a single value.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fully_unit_bound","","Return true if every variable in the find spec is fully bound to a single value, and evaluating the query doesn't require running SQL.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unbound_variables","","Return a set of the input variables mentioned in the `:in` clause that have not yet been bound. We do this by looking at the CC.",2,{"inputs":[{"name":"self"}],"output":{"generics":["variable"],"name":"btreeset"}}],[11,"simple","","",0,{"inputs":[{"name":"findspec"},{"generics":["whereclause"],"name":"vec"}],"output":{"name":"findquery"}}],[11,"from_parsed_query","","",0,{"inputs":[{"name":"parsedquery"}],"output":{"generics":["findquery"],"name":"result"}}],[14,"bail","","",null,null]],"paths":[[3,"FindQuery"],[3,"Known"],[3,"AlgebraicQuery"],[3,"ConjoiningClauses"],[3,"ColumnAlternation"],[3,"ColumnIntersection"],[3,"OrderBy"],[3,"QualifiedAlias"],[3,"SourceAlias"],[4,"AlgebrizerError"],[4,"BindingError"],[4,"EmptyBecause"],[4,"Column"],[4,"ColumnConstraint"],[4,"ColumnConstraintOrAlternation"],[4,"ComputedTable"],[4,"DatomsColumn"],[4,"DatomsTable"],[4,"FulltextColumn"],[4,"QueryValue"],[4,"VariableColumn"],[3,"QueryInputs"],[8,"ColumnName"]]};
searchIndex["mentat_query_projector"] = {"doc":"","items":[[3,"ConstantProjector","mentat_query_projector","A projector that produces a `QueryResult` containing fixed data. Takes a boxed function that should return an empty result set of the desired type.",null,null],[3,"RelResult","","The result you get from a 'rel' query, like:",null,null],[12,"width","","",0,null],[12,"values","","",0,null],[3,"QueryOutput","","",null,null],[12,"spec","","",1,null],[12,"results","","",1,null],[3,"CombinedProjection","","Combines the things you need to turn a query into SQL and turn its results into `QueryResults`: SQL-related projection information (`DISTINCT`, columns, etc.) and a Datalog projector that turns SQL into structures.",null,null],[12,"sql_projection","","A SQL projection, mapping columns mentioned in the body of the query to columns in the output.",2,null],[12,"pre_aggregate_projection","","If a query contains aggregates, we need to generate a nested subquery: an inner query that returns our distinct variable bindings (and any `:with` vars), and an outer query that applies aggregation. That's so we can put `DISTINCT` in the inner query and apply aggregation afterwards -- `SELECT DISTINCT count(foo)` counts then uniques, and we need the opposite to implement Datalog distinct semantics. If this is the case, `sql_projection` will be the outer query's projection list, and `pre_aggregate_projection` will be the inner. If the query doesn't use aggregation, this field will be `None`.",2,null],[12,"datalog_projector","","A Datalog projection. This consumes rows of the appropriate shape (as defined by the SQL projection) to yield one of the four kinds of Datalog query result.",2,null],[12,"distinct","","True if this query requires the SQL query to include DISTINCT.",2,null],[12,"group_by_cols","","",2,null],[4,"SimpleAggregationOp","","",null,null],[13,"Avg","","",3,null],[13,"Count","","",3,null],[13,"Max","","",3,null],[13,"Min","","",3,null],[13,"Sum","","",3,null],[4,"QueryResults","","",null,null],[13,"Scalar","","",4,null],[13,"Tuple","","",4,null],[13,"Coll","","",4,null],[13,"Rel","","",4,null],[5,"projected_column_for_var","","Return the projected column -- that is, a value or SQL column and an associated name -- for a given variable. Also return the type. Callers are expected to determine whether to project a type tag as an additional SQL column.",null,{"inputs":[{"name":"variable"},{"name":"conjoiningclauses"}],"output":{"name":"result"}}],[5,"query_projection","","Compute a suitable SQL projection for an algebrized query. This takes into account a number of things: - The variable list in the find spec. - The presence of any aggregate operations in the find spec. TODO: for now we only handle   simple variables - The bindings established by the topmost CC. - The types known at algebrizing time. - The types extracted from the store for unknown attributes.",null,{"inputs":[{"name":"schema"},{"name":"algebraicquery"}],"output":{"generics":["either"],"name":"result"}}],[0,"errors","","",null,null],[4,"ProjectorError","mentat_query_projector::errors","",null,null],[13,"NotYetImplemented","","We're just not done yet.  Message that the feature is recognized but not yet implemented.",5,null],[13,"CannotProjectImpossibleBinding","","",5,null],[13,"CannotApplyAggregateOperationToTypes","","",5,null],[13,"InvalidProjection","","",5,null],[13,"UnboundVariable","","",5,null],[13,"NoTypeAvailableForVariable","","",5,null],[13,"UnexpectedResultsType","","",5,null],[13,"AmbiguousAggregates","","",5,null],[13,"RusqliteError","","",5,null],[13,"DbError","","",5,null],[13,"PullError","","",5,null],[6,"Result","","",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"projectorerror"}}],[11,"from","","",5,{"inputs":[{"name":"dberror"}],"output":{"name":"projectorerror"}}],[11,"from","","",5,{"inputs":[{"name":"pullerror"}],"output":{"name":"projectorerror"}}],[11,"clone","mentat_query_projector","",3,{"inputs":[{"name":"self"}],"output":{"name":"simpleaggregationop"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"simpleaggregationop"}],"output":{"name":"bool"}}],[11,"new","","",6,{"inputs":[{"generics":["findspec"],"name":"rc"},{"generics":["fn"],"name":"box"}],"output":{"name":"constantprojector"}}],[11,"project_without_rows","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["queryoutput"],"name":"result"}}],[11,"project","","",6,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"connection"},{"name":"rows"}],"output":{"generics":["queryoutput"],"name":"result"}}],[11,"columns","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"relresult"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"relresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"relresult"}],"output":{"name":"bool"}}],[11,"empty","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"relresult"}}],[11,"is_empty","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"row_count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rows","","",0,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"row","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"generics":["vec"],"name":"vec"}],"output":{"name":"self"}}],[11,"into_iter","","",0,null],[6,"StructuredRelResult","","",null,null],[8,"Projector","","",null,null],[10,"project","","",7,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"connection"},{"name":"rows"}],"output":{"generics":["queryoutput"],"name":"result"}}],[10,"columns","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"queryoutput"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"queryoutput"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"queryresults"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"queryresults"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"queryresults"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"queryoutput"}],"output":{"name":"queryresults"}}],[11,"empty_factory","","",1,{"inputs":[{"name":"findspec"}],"output":{"generics":["fn"],"name":"box"}}],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty","","",1,{"inputs":[{"name":"rc"}],"output":{"name":"queryoutput"}}],[11,"from_constants","","",1,{"inputs":[{"name":"rc"},{"name":"variablebindings"}],"output":{"name":"queryresults"}}],[11,"into_scalar","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"into_coll","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"into_tuple","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"into_rel","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["relresult"],"name":"result"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_scalar","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"into_coll","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"into_tuple","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"into_rel","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["relresult"],"name":"result"}}],[14,"bail","","",null,null]],"paths":[[3,"RelResult"],[3,"QueryOutput"],[3,"CombinedProjection"],[4,"SimpleAggregationOp"],[4,"QueryResults"],[4,"ProjectorError"],[3,"ConstantProjector"],[8,"Projector"]]};
searchIndex["mentat_query_pull"] = {"doc":"","items":[[3,"Puller","mentat_query_pull","A `Puller` constructs on demand a map from a provided set of entity IDs to a set of structured maps.",null,null],[5,"pull_attributes_for_entity","","",null,{"inputs":[{"name":"schema"},{"name":"connection"},{"name":"entid"},{"name":"a"}],"output":{"generics":["structuredmap"],"name":"result"}}],[5,"pull_attributes_for_entities","","",null,{"inputs":[{"name":"schema"},{"name":"connection"},{"name":"e"},{"name":"a"}],"output":{"generics":["btreemap"],"name":"result"}}],[0,"errors","","",null,null],[4,"PullError","mentat_query_pull::errors","",null,null],[13,"UnnamedAttribute","","",0,null],[13,"RepeatedDbId","","",0,null],[13,"DbError","","",0,null],[6,"Result","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"dberror"}],"output":{"name":"pullerror"}}],[11,"prepare","mentat_query_pull","",1,{"inputs":[{"name":"schema"},{"generics":["pullattributespec"],"name":"vec"}],"output":{"generics":["puller"],"name":"result"}}],[11,"pull","","",1,{"inputs":[{"name":"self"},{"name":"schema"},{"name":"connection"},{"name":"e"}],"output":{"generics":["btreemap"],"name":"result"}}]],"paths":[[4,"PullError"],[3,"Puller"]]};
searchIndex["mentat_query_sql"] = {"doc":"","items":[[3,"ProjectedColumn","mentat_query_sql","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"Op","","",null,null],[12,"0","","",1,null],[3,"TableList","","",null,null],[12,"0","","",2,null],[3,"Join","","",null,null],[3,"SelectQuery","","",null,null],[12,"distinct","","",3,null],[12,"projection","","",3,null],[12,"from","","",3,null],[12,"constraints","","",3,null],[12,"group_by","","",3,null],[12,"order","","",3,null],[12,"limit","","",3,null],[4,"ColumnOrExpression","","One of the things that can appear in a projection or a constraint. Note that we use `TypedValue` here; it's not pure SQL, but it avoids us having to concern ourselves at this point with the translation between a `TypedValue` and the storage-layer representation.",null,null],[13,"Column","","",4,null],[13,"ExistingColumn","","",4,null],[13,"Entid","","",4,null],[13,"Integer","","",4,null],[13,"Long","","",4,null],[13,"Value","","",4,null],[13,"NullableAggregate","","",4,null],[13,"Expression","","",4,null],[4,"Expression","","",null,null],[13,"Unary","","",5,null],[12,"sql_op","mentat_query_sql::Expression","",5,null],[12,"arg","","",5,null],[4,"Projection","mentat_query_sql","",null,null],[13,"Columns","","",6,null],[13,"Star","","",6,null],[13,"One","","",6,null],[4,"GroupBy","","",null,null],[13,"ProjectedColumn","","",7,null],[13,"QueryColumn","","",7,null],[4,"Constraint","","",null,null],[13,"Infix","","",8,null],[12,"op","mentat_query_sql::Constraint","",8,null],[12,"left","","",8,null],[12,"right","","",8,null],[13,"Or","mentat_query_sql","",8,null],[12,"constraints","mentat_query_sql::Constraint","",8,null],[13,"And","mentat_query_sql","",8,null],[12,"constraints","mentat_query_sql::Constraint","",8,null],[13,"In","mentat_query_sql","",8,null],[12,"left","mentat_query_sql::Constraint","",8,null],[12,"list","","",8,null],[13,"IsNull","mentat_query_sql","",8,null],[12,"value","mentat_query_sql::Constraint","",8,null],[13,"IsNotNull","mentat_query_sql","",8,null],[12,"value","mentat_query_sql::Constraint","",8,null],[13,"NotExists","mentat_query_sql","",8,null],[12,"subquery","mentat_query_sql::Constraint","",8,null],[13,"TypeCheck","mentat_query_sql","",8,null],[12,"value","mentat_query_sql::Constraint","",8,null],[12,"affinity","","",8,null],[4,"TableOrSubquery","mentat_query_sql","",null,null],[13,"Table","","",9,null],[13,"Union","","",9,null],[13,"Subquery","","",9,null],[13,"Values","","",9,null],[4,"Values","","",null,null],[13,"Unnamed","","Like \"VALUES (0, 1), (2, 3), ...\". The vector must be of a length that is a multiple of the given size.",10,null],[13,"Named","","Like \"SELECT 0 AS x, SELECT 0 AS y WHERE 0 UNION ALL VALUES (0, 1), (2, 3), ...\". The vector of values must be of a length that is a multiple of the length of the vector of names.",10,null],[4,"FromClause","","",null,null],[13,"TableList","","",11,null],[13,"Join","","",11,null],[13,"Nothing","","",11,null],[6,"Name","","",null,null],[11,"from","","",4,{"inputs":[{"name":"queryvalue"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"groupby"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"groupby"}],"output":{"name":"bool"}}],[11,"push_sql","","",7,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"not_equal","","",8,{"inputs":[{"name":"columnorexpression"},{"name":"columnorexpression"}],"output":{"name":"constraint"}}],[11,"equal","","",8,{"inputs":[{"name":"columnorexpression"},{"name":"columnorexpression"}],"output":{"name":"constraint"}}],[11,"fulltext_match","","",8,{"inputs":[{"name":"columnorexpression"},{"name":"columnorexpression"}],"output":{"name":"constraint"}}],[11,"push_sql","","",4,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"push_sql","","",5,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"push_sql","","",6,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"push_sql","","",1,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"push_sql","","",8,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"push_sql","","",2,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"push_sql","","",12,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"push_sql","","",9,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"push_sql","","",10,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"push_sql","","",11,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"push_sql","","",3,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"to_sql_query","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["sqlquery","sqlerror"],"name":"result"}}]],"paths":[[3,"ProjectedColumn"],[3,"Op"],[3,"TableList"],[3,"SelectQuery"],[4,"ColumnOrExpression"],[4,"Expression"],[4,"Projection"],[4,"GroupBy"],[4,"Constraint"],[4,"TableOrSubquery"],[4,"Values"],[4,"FromClause"],[3,"Join"]]};
searchIndex["mentat_query_translator"] = {"doc":"","items":[[4,"Projection","mentat_query_translator","",null,null],[13,"Columns","","",0,null],[13,"Star","","",0,null],[13,"One","","",0,null],[4,"ProjectedSelect","","",null,null],[13,"Constant","","",1,null],[13,"Query","","",1,null],[12,"query","mentat_query_translator::ProjectedSelect","",1,null],[12,"projector","","",1,null],[5,"cc_to_exists","mentat_query_translator","Return a query that projects `1` if the `cc` matches the store, and returns no results if it doesn't.",null,{"inputs":[{"name":"conjoiningclauses"}],"output":{"name":"selectquery"}}],[5,"query_to_select","","Consume a provided `AlgebraicQuery` to yield a new `ProjectedSelect`.",null,{"inputs":[{"name":"schema"},{"name":"algebraicquery"}],"output":{"generics":["projectedselect"],"name":"result"}}],[6,"TranslatorError","","",null,null],[6,"Result","","",null,null],[11,"push_sql","","",0,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"generics":["sqlerror"],"name":"result"}}]],"paths":[[4,"Projection"],[4,"ProjectedSelect"]]};
searchIndex["mentat_sql"] = {"doc":"","items":[[4,"Value","mentat_sql","Owning dynamic type value. Value's type is typically dictated by SQLite (not by the caller).",null,null],[13,"Null","","The value is a `NULL` value.",0,null],[13,"Integer","","The value is a signed integer.",0,null],[13,"Real","","The value is a floating point number.",0,null],[13,"Text","","The value is a text string.",0,null],[13,"Blob","","The value is a blob of data",0,null],[3,"SQLQuery","","We want to accumulate values that will later be substituted into a SQL statement execution. This struct encapsulates the generated string and the initial argument list. Additional user-supplied argument bindings, with their placeholders accumulated via `push_bind_param`, will be appended to this argument list.",null,null],[12,"sql","","",1,null],[12,"args","","These will eventually perhaps be rusqlite `ToSql` instances.",1,null],[3,"SQLiteQueryBuilder","","A QueryBuilder that implements SQLite's specific escaping rules.",null,null],[12,"sql","","",2,null],[4,"SQLError","","",null,null],[13,"InvalidParameterName","","",3,null],[13,"BindParamCouldBeGenerated","","",3,null],[6,"BuildQueryResult","","",null,null],[8,"QueryBuilder","","Gratefully based on Diesel's QueryBuilder trait: https://github.com/diesel-rs/diesel/blob/4885f61b8205f7f3c2cfa03837ed6714831abe6b/diesel/src/query_builder/mod.rs#L56",null,null],[10,"push_sql","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"push_identifier","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"buildqueryresult"}}],[10,"push_typed_value","","",4,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"buildqueryresult"}}],[10,"push_bind_param","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"buildqueryresult"}}],[10,"finish","","",4,{"inputs":[{"name":"self"}],"output":{"name":"sqlquery"}}],[8,"QueryFragment","","",null,null],[10,"push_sql","","",5,{"inputs":[{"name":"self"},{"name":"querybuilder"}],"output":{"name":"buildqueryresult"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"with_prefix","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"push_sql","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_identifier","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"buildqueryresult"}}],[11,"push_typed_value","","",2,{"inputs":[{"name":"self"},{"name":"typedvalue"}],"output":{"name":"buildqueryresult"}}],[11,"push_bind_param","","Our bind parameters will be interleaved with pushed `TypedValue` instances. That means we need to use named parameters, not positional parameters. The `name` argument to this method is expected to be alphanumeric. If not, this method returns an `InvalidParameterName` error result. Callers should make sure that the name doesn't overlap with generated parameter names. If it does, `BindParamCouldBeGenerated` is the error.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"buildqueryresult"}}],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sqlquery"}}],[11,"data_type","","",0,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"column_result","","",0,{"inputs":[{"name":"valueref"}],"output":{"generics":["value","fromsqlerror"],"name":"result"}}],[11,"to_sql","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["tosqloutput","error"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"bool"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"null"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"valueref"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}]],"paths":[[4,"Value"],[3,"SQLQuery"],[3,"SQLiteQueryBuilder"],[4,"SQLError"],[8,"QueryBuilder"],[8,"QueryFragment"]]};
searchIndex["mentat_tolstoy"] = {"doc":"","items":[[0,"errors","mentat_tolstoy","",null,null],[4,"TolstoyError","mentat_tolstoy::errors","",null,null],[13,"BadServerResponse","","",0,null],[13,"DuplicateMetadata","","",0,null],[13,"TxProcessorUnfinished","","",0,null],[13,"TxIncorrectlyMapped","","",0,null],[13,"UnexpectedState","","",0,null],[13,"NotYetImplemented","","",0,null],[6,"Result","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"schema","mentat_tolstoy","",null,null],[5,"ensure_current_version","mentat_tolstoy::schema","",null,{"inputs":[{"name":"connection"}],"output":{"name":"result"}}],[7,"REMOTE_HEAD_KEY","","",null,null],[0,"metadata","mentat_tolstoy","",null,null],[3,"SyncMetadataClient","mentat_tolstoy::metadata","",null,null],[8,"HeadTrackable","","",null,null],[10,"remote_head","","",1,{"inputs":[{"name":"transaction"}],"output":{"generics":["uuid"],"name":"result"}}],[10,"set_remote_head","","",1,{"inputs":[{"name":"transaction"},{"name":"uuid"}],"output":{"name":"result"}}],[11,"remote_head","","",2,{"inputs":[{"name":"transaction"}],"output":{"generics":["uuid"],"name":"result"}}],[11,"set_remote_head","","",2,{"inputs":[{"name":"transaction"},{"name":"uuid"}],"output":{"name":"result"}}],[0,"tx_processor","mentat_tolstoy","",null,null],[3,"TxPart","mentat_tolstoy::tx_processor","",null,null],[12,"e","","",3,null],[12,"a","","",3,null],[12,"v","","",3,null],[12,"tx","","",3,null],[12,"added","","",3,null],[3,"Processor","","",null,null],[3,"DatomsIterator","","",null,null],[8,"TxReceiver","","",null,null],[10,"tx","","",4,{"inputs":[{"name":"self"},{"name":"entid"},{"name":"t"}],"output":{"name":"result"}}],[10,"done","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"txpart"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"process","","",6,{"inputs":[{"name":"transaction"},{"generics":["entid"],"name":"option"},{"name":"r"}],"output":{"name":"result"}}],[0,"syncer","mentat_tolstoy","",null,null],[3,"Syncer","mentat_tolstoy::syncer","",null,null],[5,"d","","",null,{"inputs":[{"name":"str"}],"output":null}],[11,"flow","","",7,{"inputs":[{"name":"connection"},{"name":"string"},{"name":"uuid"}],"output":{"name":"result"}}],[0,"tx_mapper","mentat_tolstoy","",null,null],[3,"TxMapper","mentat_tolstoy::tx_mapper","",null,null],[11,"set_bulk","","",8,{"inputs":[{"name":"transaction"},{"name":"hashmap"}],"output":{"name":"result"}}],[11,"get_or_set_uuid_for_tx","","",8,{"inputs":[{"name":"transaction"},{"name":"entid"}],"output":{"generics":["uuid"],"name":"result"}}],[11,"get_tx_for_uuid","","",8,{"inputs":[{"name":"transaction"},{"name":"uuid"}],"output":{"generics":["option"],"name":"result"}}],[11,"get","","",8,{"inputs":[{"name":"transaction"},{"name":"entid"}],"output":{"generics":["option"],"name":"result"}}],[14,"bail","mentat_tolstoy","",null,null]],"paths":[[4,"TolstoyError"],[8,"HeadTrackable"],[3,"SyncMetadataClient"],[3,"TxPart"],[8,"TxReceiver"],[3,"DatomsIterator"],[3,"Processor"],[3,"Syncer"],[3,"TxMapper"]]};
initSearch(searchIndex);
